-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
generic (
    C_M_AXI_A_V_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_A_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_V_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_A_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_A_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_V_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_a_V_AWVALID : OUT STD_LOGIC;
    m_axi_a_V_AWREADY : IN STD_LOGIC;
    m_axi_a_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_ADDR_WIDTH-1 downto 0);
    m_axi_a_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_ID_WIDTH-1 downto 0);
    m_axi_a_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_AWUSER_WIDTH-1 downto 0);
    m_axi_a_V_WVALID : OUT STD_LOGIC;
    m_axi_a_V_WREADY : IN STD_LOGIC;
    m_axi_a_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_DATA_WIDTH-1 downto 0);
    m_axi_a_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_DATA_WIDTH/8-1 downto 0);
    m_axi_a_V_WLAST : OUT STD_LOGIC;
    m_axi_a_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_ID_WIDTH-1 downto 0);
    m_axi_a_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_WUSER_WIDTH-1 downto 0);
    m_axi_a_V_ARVALID : OUT STD_LOGIC;
    m_axi_a_V_ARREADY : IN STD_LOGIC;
    m_axi_a_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_ADDR_WIDTH-1 downto 0);
    m_axi_a_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_ID_WIDTH-1 downto 0);
    m_axi_a_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_V_ARUSER_WIDTH-1 downto 0);
    m_axi_a_V_RVALID : IN STD_LOGIC;
    m_axi_a_V_RREADY : OUT STD_LOGIC;
    m_axi_a_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_V_DATA_WIDTH-1 downto 0);
    m_axi_a_V_RLAST : IN STD_LOGIC;
    m_axi_a_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_V_ID_WIDTH-1 downto 0);
    m_axi_a_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_V_RUSER_WIDTH-1 downto 0);
    m_axi_a_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_V_BVALID : IN STD_LOGIC;
    m_axi_a_V_BREADY : OUT STD_LOGIC;
    m_axi_a_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_V_ID_WIDTH-1 downto 0);
    m_axi_a_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_V_BUSER_WIDTH-1 downto 0);
    n_V : IN STD_LOGIC_VECTOR (15 downto 0);
    n_V_ap_vld : IN STD_LOGIC;
    a_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    a_addr_ap_vld : IN STD_LOGIC;
    b_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    b_addr_ap_vld : IN STD_LOGIC;
    c_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    c_addr_ap_vld : IN STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flvf1924-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=16,HLS_SYN_FF=5183,HLS_SYN_LUT=3917}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_V_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal n_V_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal n_V_ap_vld_preg : STD_LOGIC := '0';
    signal n_V_ap_vld_in_sig : STD_LOGIC;
    signal a_addr_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal a_addr_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_addr_ap_vld_preg : STD_LOGIC := '0';
    signal a_addr_ap_vld_in_sig : STD_LOGIC;
    signal b_addr_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal b_addr_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_addr_ap_vld_preg : STD_LOGIC := '0';
    signal b_addr_ap_vld_in_sig : STD_LOGIC;
    signal c_addr_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal c_addr_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_addr_ap_vld_preg : STD_LOGIC := '0';
    signal c_addr_ap_vld_in_sig : STD_LOGIC;
    signal a_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond3_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal exitcond_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal a_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_flag00000000 : BOOLEAN;
    signal exitcond4_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp3_iter1_exitcond4_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal n_V_blk_n : STD_LOGIC;
    signal a_addr_blk_n : STD_LOGIC;
    signal b_addr_blk_n : STD_LOGIC;
    signal c_addr_blk_n : STD_LOGIC;
    signal a_V_AWVALID : STD_LOGIC;
    signal a_V_AWREADY : STD_LOGIC;
    signal a_V_WVALID : STD_LOGIC;
    signal a_V_WREADY : STD_LOGIC;
    signal a_V_ARVALID : STD_LOGIC;
    signal a_V_ARREADY : STD_LOGIC;
    signal a_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal a_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal a_V_RVALID : STD_LOGIC;
    signal a_V_RREADY : STD_LOGIC;
    signal a_V_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal a_V_RLAST : STD_LOGIC;
    signal a_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_V_BVALID : STD_LOGIC;
    signal a_V_BREADY : STD_LOGIC;
    signal a_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_279 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_pp0_iter1_indvar_reg_279 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal indvar1_reg_291 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_pp1_iter1_indvar1_reg_291 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal i_reg_303 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar2_reg_314 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_cast_fu_386_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_cast_reg_834 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal segment_V_fu_392_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal segment_V_reg_839 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_398_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_reg_844 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_1_fu_409_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_1_reg_852 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal segment_len_V_fu_420_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal segment_len_V_reg_857 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_a_V_ARREADY : STD_LOGIC;
    signal tmp_3_add_i32_shr_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_add_i32_shr_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond3_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_447_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_next_reg_881 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_next1_reg_896 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state25_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp2_iter1_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter4_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter5_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter6_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter7_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter8_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter9_exitcond2_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_6_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter1_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter2_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter3_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter4_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter5_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter6_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter7_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter8_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp2_iter9_tmp_6_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_1_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_2_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_3_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_4_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_5_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_6_reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_7_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_5_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_6_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_7_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_a_V_AWREADY : STD_LOGIC;
    signal exitcond4_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state37_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_a_V_WREADY : STD_LOGIC;
    signal ap_block_state39_io : BOOLEAN;
    signal ap_block_pp3_stage0_flag00011001 : BOOLEAN;
    signal indvar_next2_fu_775_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal buff_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal buff_V_load_reg_1144 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal curr_addr_a_1_fu_786_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_addr_a_1_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal curr_addr_b_1_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_addr_b_1_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_addr_c_1_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_addr_c_1_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state37 : STD_LOGIC;
    signal buff_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_a_ce0 : STD_LOGIC;
    signal buff_a_we0 : STD_LOGIC;
    signal buff_a_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal buff_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_b_ce0 : STD_LOGIC;
    signal buff_b_we0 : STD_LOGIC;
    signal buff_b_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal buff_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_V_ce0 : STD_LOGIC;
    signal buff_V_we0 : STD_LOGIC;
    signal buff_V_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal s_reg_238 : STD_LOGIC_VECTOR (8 downto 0);
    signal curr_addr_a_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_addr_b_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_addr_c_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_283_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar1_phi_fu_295_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal tmp_12_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_a_V_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_a_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_a_V_WREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_flag00001001 : BOOLEAN;
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_383_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_7_fu_735_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_6_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_5_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_4_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_3_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_2_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_1_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component example_fadd_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component example_buff_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component example_a_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    example_a_V_m_axi_U : component example_a_V_m_axi
    generic map (
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_A_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_A_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_a_V_AWVALID,
        AWREADY => m_axi_a_V_AWREADY,
        AWADDR => m_axi_a_V_AWADDR,
        AWID => m_axi_a_V_AWID,
        AWLEN => m_axi_a_V_AWLEN,
        AWSIZE => m_axi_a_V_AWSIZE,
        AWBURST => m_axi_a_V_AWBURST,
        AWLOCK => m_axi_a_V_AWLOCK,
        AWCACHE => m_axi_a_V_AWCACHE,
        AWPROT => m_axi_a_V_AWPROT,
        AWQOS => m_axi_a_V_AWQOS,
        AWREGION => m_axi_a_V_AWREGION,
        AWUSER => m_axi_a_V_AWUSER,
        WVALID => m_axi_a_V_WVALID,
        WREADY => m_axi_a_V_WREADY,
        WDATA => m_axi_a_V_WDATA,
        WSTRB => m_axi_a_V_WSTRB,
        WLAST => m_axi_a_V_WLAST,
        WID => m_axi_a_V_WID,
        WUSER => m_axi_a_V_WUSER,
        ARVALID => m_axi_a_V_ARVALID,
        ARREADY => m_axi_a_V_ARREADY,
        ARADDR => m_axi_a_V_ARADDR,
        ARID => m_axi_a_V_ARID,
        ARLEN => m_axi_a_V_ARLEN,
        ARSIZE => m_axi_a_V_ARSIZE,
        ARBURST => m_axi_a_V_ARBURST,
        ARLOCK => m_axi_a_V_ARLOCK,
        ARCACHE => m_axi_a_V_ARCACHE,
        ARPROT => m_axi_a_V_ARPROT,
        ARQOS => m_axi_a_V_ARQOS,
        ARREGION => m_axi_a_V_ARREGION,
        ARUSER => m_axi_a_V_ARUSER,
        RVALID => m_axi_a_V_RVALID,
        RREADY => m_axi_a_V_RREADY,
        RDATA => m_axi_a_V_RDATA,
        RLAST => m_axi_a_V_RLAST,
        RID => m_axi_a_V_RID,
        RUSER => m_axi_a_V_RUSER,
        RRESP => m_axi_a_V_RRESP,
        BVALID => m_axi_a_V_BVALID,
        BREADY => m_axi_a_V_BREADY,
        BRESP => m_axi_a_V_BRESP,
        BID => m_axi_a_V_BID,
        BUSER => m_axi_a_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => a_V_ARVALID,
        I_ARREADY => a_V_ARREADY,
        I_ARADDR => a_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => a_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => a_V_RVALID,
        I_RREADY => a_V_RREADY,
        I_RDATA => a_V_RDATA,
        I_RID => a_V_RID,
        I_RUSER => a_V_RUSER,
        I_RRESP => a_V_RRESP,
        I_RLAST => a_V_RLAST,
        I_AWVALID => a_V_AWVALID,
        I_AWREADY => a_V_AWREADY,
        I_AWADDR => tmp_7_fu_759_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => tmp_3_add_i32_shr_reg_872,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => a_V_WVALID,
        I_WREADY => a_V_WREADY,
        I_WDATA => buff_V_load_reg_1144,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv32_FFFFFFFF,
        I_BVALID => a_V_BVALID,
        I_BREADY => a_V_BREADY,
        I_BRESP => a_V_BRESP,
        I_BID => a_V_BID,
        I_BUSER => a_V_BUSER);

    buff_a_U : component example_buff_a
    generic map (
        DataWidth => 256,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_a_address0,
        ce0 => buff_a_ce0,
        we0 => buff_a_we0,
        d0 => reg_357,
        q0 => buff_a_q0);

    buff_b_U : component example_buff_a
    generic map (
        DataWidth => 256,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_b_address0,
        ce0 => buff_b_ce0,
        we0 => buff_b_we0,
        d0 => reg_357,
        q0 => buff_b_q0);

    buff_V_U : component example_buff_a
    generic map (
        DataWidth => 256,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_V_address0,
        ce0 => buff_V_ce0,
        we0 => buff_V_we0,
        d0 => buff_V_d0,
        q0 => buff_V_q0);

    example_fadd_32nsbkb_U1 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    example_fadd_32nsbkb_U2 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_329_p0,
        din1 => grp_fu_329_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p2);

    example_fadd_32nsbkb_U3 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    example_fadd_32nsbkb_U4 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_337_p0,
        din1 => grp_fu_337_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    example_fadd_32nsbkb_U5 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p2);

    example_fadd_32nsbkb_U6 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_345_p0,
        din1 => grp_fu_345_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    example_fadd_32nsbkb_U7 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    example_fadd_32nsbkb_U8 : component example_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);





    a_addr_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_addr_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
                    a_addr_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = a_addr_ap_vld))) then 
                    a_addr_ap_vld_preg <= a_addr_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    a_addr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_addr_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = a_addr_ap_vld))) then 
                    a_addr_preg <= a_addr;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state11 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state21 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state25 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_sig_ioackin_a_V_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_condition_pp3_exit_iter0_state37 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_sig_ioackin_a_V_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_a_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_V_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_a_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_a_V_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_a_V_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = a_V_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = a_V_ARREADY)))) then 
                    ap_reg_ioackin_a_V_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_a_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                    if ((ap_sig_ioackin_a_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_a_V_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_V_AWREADY)) then 
                        ap_reg_ioackin_a_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_a_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_V_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond4_reg_1130))) then
                    if ((ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_a_V_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = a_V_WREADY) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_a_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    b_addr_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_addr_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
                    b_addr_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = b_addr_ap_vld))) then 
                    b_addr_ap_vld_preg <= b_addr_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    b_addr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_addr_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = b_addr_ap_vld))) then 
                    b_addr_preg <= b_addr;
                end if; 
            end if;
        end if;
    end process;


    c_addr_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_addr_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
                    c_addr_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = c_addr_ap_vld))) then 
                    c_addr_ap_vld_preg <= c_addr_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    c_addr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_addr_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = c_addr_ap_vld))) then 
                    c_addr_preg <= c_addr;
                end if; 
            end if;
        end if;
    end process;


    n_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
                    n_V_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = n_V_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    n_V_ap_vld_preg <= n_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    n_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_V_preg <= ap_const_lv16_0;
            else
                if (((ap_const_logic_1 = n_V_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    n_V_preg <= n_V;
                end if; 
            end if;
        end if;
    end process;


    curr_addr_a_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (a_V_BVALID = ap_const_logic_1))) then 
                curr_addr_a_reg_249 <= curr_addr_a_1_reg_1149;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                curr_addr_a_reg_249 <= a_addr_in_sig;
            end if; 
        end if;
    end process;

    curr_addr_b_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (a_V_BVALID = ap_const_logic_1))) then 
                curr_addr_b_reg_259 <= curr_addr_b_1_reg_1154;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                curr_addr_b_reg_259 <= b_addr_in_sig;
            end if; 
        end if;
    end process;

    curr_addr_c_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (a_V_BVALID = ap_const_logic_1))) then 
                curr_addr_c_reg_269 <= curr_addr_c_1_reg_1159;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                curr_addr_c_reg_269 <= c_addr_in_sig;
            end if; 
        end if;
    end process;

    i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_reg_303 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond2_fu_485_p2))) then 
                i_reg_303 <= i_1_fu_490_p2;
            end if; 
        end if;
    end process;

    indvar1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_reg_892) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then 
                indvar1_reg_291 <= indvar_next1_reg_896;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar1_reg_291 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar2_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond4_fu_770_p2))) then 
                indvar2_reg_314 <= indvar_next2_fu_775_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_sig_ioackin_a_V_AWREADY = ap_const_logic_1))) then 
                indvar2_reg_314 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond3_reg_877 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                indvar_reg_279 <= indvar_next_reg_881;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_reg_279 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    s_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (a_V_BVALID = ap_const_logic_1))) then 
                s_reg_238 <= s_1_reg_852;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                s_reg_238 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond3_reg_877 <= exitcond3_reg_877;
                ap_reg_pp0_iter1_indvar_reg_279 <= indvar_reg_279;
                exitcond3_reg_877 <= exitcond3_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_reg_892 <= exitcond_reg_892;
                ap_reg_pp1_iter1_indvar1_reg_291 <= indvar1_reg_291;
                exitcond_reg_892 <= exitcond_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond2_reg_901 <= exitcond2_reg_901;
                    ap_reg_pp2_iter1_tmp_6_reg_910(8 downto 0) <= tmp_6_reg_910(8 downto 0);
                exitcond2_reg_901 <= exitcond2_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp2_iter2_exitcond2_reg_901 <= ap_reg_pp2_iter1_exitcond2_reg_901;
                    ap_reg_pp2_iter2_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter1_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter3_exitcond2_reg_901 <= ap_reg_pp2_iter2_exitcond2_reg_901;
                    ap_reg_pp2_iter3_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter2_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter4_exitcond2_reg_901 <= ap_reg_pp2_iter3_exitcond2_reg_901;
                    ap_reg_pp2_iter4_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter3_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter5_exitcond2_reg_901 <= ap_reg_pp2_iter4_exitcond2_reg_901;
                    ap_reg_pp2_iter5_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter4_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter6_exitcond2_reg_901 <= ap_reg_pp2_iter5_exitcond2_reg_901;
                    ap_reg_pp2_iter6_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter5_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter7_exitcond2_reg_901 <= ap_reg_pp2_iter6_exitcond2_reg_901;
                    ap_reg_pp2_iter7_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter6_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter8_exitcond2_reg_901 <= ap_reg_pp2_iter7_exitcond2_reg_901;
                    ap_reg_pp2_iter8_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter7_tmp_6_reg_910(8 downto 0);
                ap_reg_pp2_iter9_exitcond2_reg_901 <= ap_reg_pp2_iter8_exitcond2_reg_901;
                    ap_reg_pp2_iter9_tmp_6_reg_910(8 downto 0) <= ap_reg_pp2_iter8_tmp_6_reg_910(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp3_iter1_exitcond4_reg_1130 <= exitcond4_reg_1130;
                exitcond4_reg_1130 <= exitcond4_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond4_reg_1130))) then
                buff_V_load_reg_1144 <= buff_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                curr_addr_a_1_reg_1149 <= curr_addr_a_1_fu_786_p2;
                curr_addr_b_1_reg_1154 <= curr_addr_b_1_fu_792_p2;
                curr_addr_c_1_reg_1159 <= curr_addr_c_1_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = c_addr_ap_vld_in_sig) or (ap_const_logic_0 = b_addr_ap_vld_in_sig) or (ap_const_logic_0 = a_addr_ap_vld_in_sig) or (ap_const_logic_0 = n_V_ap_vld_in_sig))))) then
                i_op_assign_reg_829 <= i_op_assign_fu_377_p2;
                r_V_reg_824 <= r_V_fu_373_p1;
                tmp_reg_819 <= n_V_in_sig(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                indvar_next1_reg_896 <= indvar_next1_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next_reg_881 <= indvar_next_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_reg_901))) then
                p_Result_1_1_reg_940 <= buff_b_q0(63 downto 32);
                p_Result_1_2_reg_950 <= buff_b_q0(95 downto 64);
                p_Result_1_3_reg_960 <= buff_b_q0(127 downto 96);
                p_Result_1_4_reg_970 <= buff_b_q0(159 downto 128);
                p_Result_1_5_reg_980 <= buff_b_q0(191 downto 160);
                p_Result_1_6_reg_990 <= buff_b_q0(223 downto 192);
                p_Result_1_7_reg_1000 <= buff_b_q0(255 downto 224);
                p_Result_2_reg_945 <= buff_a_q0(95 downto 64);
                p_Result_3_reg_955 <= buff_a_q0(127 downto 96);
                p_Result_4_reg_965 <= buff_a_q0(159 downto 128);
                p_Result_5_reg_975 <= buff_a_q0(191 downto 160);
                p_Result_6_reg_985 <= buff_a_q0(223 downto 192);
                p_Result_7_reg_995 <= buff_a_q0(255 downto 224);
                p_Result_s_reg_935 <= buff_a_q0(63 downto 32);
                tmp_14_reg_930 <= tmp_14_fu_506_p1;
                tmp_3_reg_925 <= tmp_3_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_1_reg_844 <= r_V_1_fu_398_p2;
                    r_V_cast_reg_834(7 downto 0) <= r_V_cast_fu_386_p1(7 downto 0);
                segment_V_reg_839 <= segment_V_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond3_reg_877 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_reg_892) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)))) then
                reg_357 <= a_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                s_1_reg_852 <= s_1_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_404_p2))) then
                segment_len_V_reg_857 <= segment_len_V_fu_420_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter8_exitcond2_reg_901))) then
                tmp_11_reg_1085 <= grp_fu_325_p2;
                tmp_14_1_reg_1090 <= grp_fu_329_p2;
                tmp_14_2_reg_1095 <= grp_fu_333_p2;
                tmp_14_3_reg_1100 <= grp_fu_337_p2;
                tmp_14_4_reg_1105 <= grp_fu_341_p2;
                tmp_14_5_reg_1110 <= grp_fu_345_p2;
                tmp_14_6_reg_1115 <= grp_fu_349_p2;
                tmp_14_7_reg_1120 <= grp_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_a_V_ARREADY = ap_const_logic_1))) then
                    tmp_3_add_i32_shr_reg_872(8 downto 0) <= tmp_3_add_i32_shr_fu_438_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_fu_485_p2))) then
                    tmp_6_reg_910(8 downto 0) <= tmp_6_fu_496_p1(8 downto 0);
            end if;
        end if;
    end process;
    r_V_cast_reg_834(8) <= '0';
    tmp_3_add_i32_shr_reg_872(31 downto 9) <= "00000000000000000000000";
    tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter1_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter2_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter3_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter4_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter5_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter6_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter7_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter8_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    ap_reg_pp2_iter9_tmp_6_reg_910(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, n_V_ap_vld_in_sig, a_addr_ap_vld_in_sig, b_addr_ap_vld_in_sig, c_addr_ap_vld_in_sig, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state14, ap_enable_reg_pp1_iter1, ap_CS_fsm_state36, ap_enable_reg_pp3_iter2, ap_CS_fsm_state44, a_V_BVALID, ap_CS_fsm_state3, exitcond1_fu_404_p2, ap_sig_ioackin_a_V_ARREADY, exitcond3_fu_442_p2, ap_enable_reg_pp0_iter0, exitcond_fu_469_p2, ap_enable_reg_pp1_iter0, exitcond2_fu_485_p2, ap_enable_reg_pp2_iter0, ap_sig_ioackin_a_V_AWREADY, exitcond4_fu_770_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_flag00011011, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_block_pp3_stage0_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = c_addr_ap_vld_in_sig) or (ap_const_logic_0 = b_addr_ap_vld_in_sig) or (ap_const_logic_0 = a_addr_ap_vld_in_sig) or (ap_const_logic_0 = n_V_ap_vld_in_sig))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_a_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond3_fu_442_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond3_fu_442_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_a_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_469_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_469_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter10) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_fu_485_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter10) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_fu_485_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_sig_ioackin_a_V_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (exitcond4_fu_770_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (exitcond4_fu_770_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (a_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_V_ARADDR_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, tmp_s_fu_427_p1, tmp_5_fu_458_p1, ap_reg_ioackin_a_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_V_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                a_V_ARADDR <= tmp_5_fu_458_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                a_V_ARADDR <= tmp_s_fu_427_p1;
            else 
                a_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_V_ARLEN_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, tmp_3_add_i32_shr_fu_438_p1, tmp_3_add_i32_shr_reg_872, ap_reg_ioackin_a_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_V_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                a_V_ARLEN <= tmp_3_add_i32_shr_reg_872;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                a_V_ARLEN <= tmp_3_add_i32_shr_fu_438_p1;
            else 
                a_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_V_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_reg_ioackin_a_V_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_a_V_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_0 = ap_reg_ioackin_a_V_ARREADY)))) then 
            a_V_ARVALID <= ap_const_logic_1;
        else 
            a_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    a_V_AWVALID_assign_proc : process(ap_CS_fsm_state36, ap_reg_ioackin_a_V_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_const_logic_0 = ap_reg_ioackin_a_V_AWREADY))) then 
            a_V_AWVALID <= ap_const_logic_1;
        else 
            a_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    a_V_BREADY_assign_proc : process(ap_CS_fsm_state44, a_V_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (a_V_BVALID = ap_const_logic_1))) then 
            a_V_BREADY <= ap_const_logic_1;
        else 
            a_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    a_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_877, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_reg_892, ap_block_pp0_stage0_flag00011001, ap_block_pp1_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond3_reg_877 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_reg_892) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)))) then 
            a_V_RREADY <= ap_const_logic_1;
        else 
            a_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    a_V_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, ap_reg_pp3_iter1_exitcond4_reg_1130, ap_reg_ioackin_a_V_WREADY, ap_block_pp3_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond4_reg_1130) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_a_V_WREADY))) then 
            a_V_WVALID <= ap_const_logic_1;
        else 
            a_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    a_V_blk_n_AR_assign_proc : process(m_axi_a_V_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_V_blk_n_AR <= m_axi_a_V_ARREADY;
        else 
            a_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    a_V_blk_n_AW_assign_proc : process(m_axi_a_V_AWREADY, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            a_V_blk_n_AW <= m_axi_a_V_AWREADY;
        else 
            a_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    a_V_blk_n_B_assign_proc : process(m_axi_a_V_BVALID, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            a_V_blk_n_B <= m_axi_a_V_BVALID;
        else 
            a_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    a_V_blk_n_R_assign_proc : process(m_axi_a_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond3_reg_877, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000, exitcond_reg_892)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond3_reg_877 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_892)))) then 
            a_V_blk_n_R <= m_axi_a_V_RVALID;
        else 
            a_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    a_V_blk_n_W_assign_proc : process(m_axi_a_V_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0_flag00000000, ap_reg_pp3_iter1_exitcond4_reg_1130)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond4_reg_1130))) then 
            a_V_blk_n_W <= m_axi_a_V_WREADY;
        else 
            a_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    a_addr_ap_vld_in_sig_assign_proc : process(a_addr_ap_vld, a_addr_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = a_addr_ap_vld)) then 
            a_addr_ap_vld_in_sig <= a_addr_ap_vld;
        else 
            a_addr_ap_vld_in_sig <= a_addr_ap_vld_preg;
        end if; 
    end process;


    a_addr_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, a_addr_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_addr_blk_n <= a_addr_ap_vld;
        else 
            a_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    a_addr_in_sig_assign_proc : process(a_addr, a_addr_preg, a_addr_ap_vld)
    begin
        if ((ap_const_logic_1 = a_addr_ap_vld)) then 
            a_addr_in_sig <= a_addr;
        else 
            a_addr_in_sig <= a_addr_preg;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(21);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(23);
    ap_CS_fsm_state44 <= ap_CS_fsm(27);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_877, a_V_RVALID)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond3_reg_877 = ap_const_lv1_0) and (ap_const_logic_0 = a_V_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_877, a_V_RVALID)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond3_reg_877 = ap_const_lv1_0) and (ap_const_logic_0 = a_V_RVALID));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_reg_892, a_V_RVALID)
    begin
                ap_block_pp1_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_reg_892) and (ap_const_logic_0 = a_V_RVALID));
    end process;


    ap_block_pp1_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_reg_892, a_V_RVALID)
    begin
                ap_block_pp1_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_reg_892) and (ap_const_logic_0 = a_V_RVALID));
    end process;

        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state39_io)
    begin
                ap_block_pp3_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_boolean_1 = ap_block_state39_io));
    end process;


    ap_block_pp3_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state39_io)
    begin
                ap_block_pp3_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_boolean_1 = ap_block_state39_io));
    end process;


    ap_block_state1_assign_proc : process(ap_start, n_V_ap_vld_in_sig, a_addr_ap_vld_in_sig, b_addr_ap_vld_in_sig, c_addr_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = c_addr_ap_vld_in_sig) or (ap_const_logic_0 = b_addr_ap_vld_in_sig) or (ap_const_logic_0 = a_addr_ap_vld_in_sig) or (ap_const_logic_0 = n_V_ap_vld_in_sig));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter1_assign_proc : process(exitcond3_reg_877, a_V_RVALID)
    begin
                ap_block_state12_pp0_stage0_iter1 <= ((exitcond3_reg_877 = ap_const_lv1_0) and (ap_const_logic_0 = a_V_RVALID));
    end process;

        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(exitcond_reg_892, a_V_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((ap_const_lv1_0 = exitcond_reg_892) and (ap_const_logic_0 = a_V_RVALID));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_io_assign_proc : process(ap_reg_pp3_iter1_exitcond4_reg_1130, ap_sig_ioackin_a_V_WREADY)
    begin
                ap_block_state39_io <= ((ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond4_reg_1130) and (ap_const_logic_0 = ap_sig_ioackin_a_V_WREADY));
    end process;

        ap_block_state39_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(exitcond3_fu_442_p2)
    begin
        if ((exitcond3_fu_442_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond_fu_469_p2)
    begin
        if ((exitcond_fu_469_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state25_assign_proc : process(exitcond2_fu_485_p2)
    begin
        if ((exitcond2_fu_485_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state37_assign_proc : process(exitcond4_fu_770_p2)
    begin
        if ((exitcond4_fu_770_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond1_fu_404_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2) and (ap_const_logic_0 = ap_enable_reg_pp2_iter3) and (ap_const_logic_0 = ap_enable_reg_pp2_iter4) and (ap_const_logic_0 = ap_enable_reg_pp2_iter5) and (ap_const_logic_0 = ap_enable_reg_pp2_iter6) and (ap_const_logic_0 = ap_enable_reg_pp2_iter7) and (ap_const_logic_0 = ap_enable_reg_pp2_iter8) and (ap_const_logic_0 = ap_enable_reg_pp2_iter9) and (ap_const_logic_0 = ap_enable_reg_pp2_iter10))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp3_iter0) and (ap_const_logic_0 = ap_enable_reg_pp3_iter1) and (ap_const_logic_0 = ap_enable_reg_pp3_iter2))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond1_fu_404_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_a_V_ARREADY_assign_proc : process(a_V_ARREADY, ap_reg_ioackin_a_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_V_ARREADY)) then 
            ap_sig_ioackin_a_V_ARREADY <= a_V_ARREADY;
        else 
            ap_sig_ioackin_a_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_a_V_AWREADY_assign_proc : process(a_V_AWREADY, ap_reg_ioackin_a_V_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_V_AWREADY)) then 
            ap_sig_ioackin_a_V_AWREADY <= a_V_AWREADY;
        else 
            ap_sig_ioackin_a_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_a_V_WREADY_assign_proc : process(a_V_WREADY, ap_reg_ioackin_a_V_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_V_WREADY)) then 
            ap_sig_ioackin_a_V_WREADY <= a_V_WREADY;
        else 
            ap_sig_ioackin_a_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    b_addr_ap_vld_in_sig_assign_proc : process(b_addr_ap_vld, b_addr_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = b_addr_ap_vld)) then 
            b_addr_ap_vld_in_sig <= b_addr_ap_vld;
        else 
            b_addr_ap_vld_in_sig <= b_addr_ap_vld_preg;
        end if; 
    end process;


    b_addr_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, b_addr_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_addr_blk_n <= b_addr_ap_vld;
        else 
            b_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    b_addr_in_sig_assign_proc : process(b_addr, b_addr_preg, b_addr_ap_vld)
    begin
        if ((ap_const_logic_1 = b_addr_ap_vld)) then 
            b_addr_in_sig <= b_addr;
        else 
            b_addr_in_sig <= b_addr_preg;
        end if; 
    end process;


    buff_V_address0_assign_proc : process(ap_block_pp3_stage0_flag00000000, ap_reg_pp2_iter9_tmp_6_reg_910, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter10, ap_block_pp2_stage0_flag00000000, tmp_12_fu_781_p1)
    begin
        if (((ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            buff_V_address0 <= tmp_12_fu_781_p1(8 - 1 downto 0);
        elsif (((ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter10))) then 
            buff_V_address0 <= ap_reg_pp2_iter9_tmp_6_reg_910(8 - 1 downto 0);
        else 
            buff_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buff_V_ce0_assign_proc : process(ap_block_pp2_stage0_flag00011001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_flag00011001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0)) or ((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter10)))) then 
            buff_V_ce0 <= ap_const_logic_1;
        else 
            buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_V_d0 <= (((((((p_Repl2_7_fu_735_p1 & p_Repl2_6_fu_732_p1) & p_Repl2_5_fu_729_p1) & p_Repl2_4_fu_726_p1) & p_Repl2_3_fu_723_p1) & p_Repl2_2_fu_720_p1) & p_Repl2_1_fu_717_p1) & p_Repl2_s_fu_714_p1);

    buff_V_we0_assign_proc : process(ap_block_pp2_stage0_flag00011001, ap_reg_pp2_iter9_exitcond2_reg_901, ap_enable_reg_pp2_iter10)
    begin
        if (((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter10) and (ap_const_lv1_0 = ap_reg_pp2_iter9_exitcond2_reg_901))) then 
            buff_V_we0 <= ap_const_logic_1;
        else 
            buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_a_address0_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, tmp_6_fu_496_p1, ap_enable_reg_pp0_iter2, tmp_1_fu_453_p1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            buff_a_address0 <= tmp_6_fu_496_p1(8 - 1 downto 0);
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            buff_a_address0 <= tmp_1_fu_453_p1(8 - 1 downto 0);
        else 
            buff_a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buff_a_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            buff_a_ce0 <= ap_const_logic_1;
        else 
            buff_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_a_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond3_reg_877, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond3_reg_877))) then 
            buff_a_we0 <= ap_const_logic_1;
        else 
            buff_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_b_address0_assign_proc : process(ap_block_pp1_stage0_flag00000000, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, tmp_6_fu_496_p1, ap_enable_reg_pp1_iter2, tmp_4_fu_480_p1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            buff_b_address0 <= tmp_6_fu_496_p1(8 - 1 downto 0);
        elsif (((ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2))) then 
            buff_b_address0 <= tmp_4_fu_480_p1(8 - 1 downto 0);
        else 
            buff_b_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buff_b_ce0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)))) then 
            buff_b_ce0 <= ap_const_logic_1;
        else 
            buff_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_b_we0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter1_exitcond_reg_892, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_reg_892))) then 
            buff_b_we0 <= ap_const_logic_1;
        else 
            buff_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_addr_ap_vld_in_sig_assign_proc : process(c_addr_ap_vld, c_addr_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = c_addr_ap_vld)) then 
            c_addr_ap_vld_in_sig <= c_addr_ap_vld;
        else 
            c_addr_ap_vld_in_sig <= c_addr_ap_vld_preg;
        end if; 
    end process;


    c_addr_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, c_addr_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            c_addr_blk_n <= c_addr_ap_vld;
        else 
            c_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_addr_in_sig_assign_proc : process(c_addr, c_addr_preg, c_addr_ap_vld)
    begin
        if ((ap_const_logic_1 = c_addr_ap_vld)) then 
            c_addr_in_sig <= c_addr;
        else 
            c_addr_in_sig <= c_addr_preg;
        end if; 
    end process;

    curr_addr_a_1_fu_786_p2 <= std_logic_vector(unsigned(curr_addr_a_reg_249) + unsigned(ap_const_lv32_100));
    curr_addr_b_1_fu_792_p2 <= std_logic_vector(unsigned(curr_addr_b_reg_259) + unsigned(ap_const_lv32_100));
    curr_addr_c_1_fu_798_p2 <= std_logic_vector(unsigned(curr_addr_c_reg_269) + unsigned(ap_const_lv32_100));
    exitcond1_fu_404_p2 <= "1" when (s_reg_238 = segment_V_reg_839) else "0";
    exitcond2_fu_485_p2 <= "1" when (i_reg_303 = segment_len_V_reg_857) else "0";
    exitcond3_fu_442_p2 <= "1" when (indvar_phi_fu_283_p4 = segment_len_V_reg_857) else "0";
    exitcond4_fu_770_p2 <= "1" when (indvar2_reg_314 = segment_len_V_reg_857) else "0";
    exitcond_fu_469_p2 <= "1" when (indvar1_phi_fu_295_p4 = segment_len_V_reg_857) else "0";
    grp_fu_325_p0 <= tmp_3_reg_925;
    grp_fu_325_p1 <= tmp_14_reg_930;
    grp_fu_329_p0 <= p_Result_s_reg_935;
    grp_fu_329_p1 <= p_Result_1_1_reg_940;
    grp_fu_333_p0 <= p_Result_2_reg_945;
    grp_fu_333_p1 <= p_Result_1_2_reg_950;
    grp_fu_337_p0 <= p_Result_3_reg_955;
    grp_fu_337_p1 <= p_Result_1_3_reg_960;
    grp_fu_341_p0 <= p_Result_4_reg_965;
    grp_fu_341_p1 <= p_Result_1_4_reg_970;
    grp_fu_345_p0 <= p_Result_5_reg_975;
    grp_fu_345_p1 <= p_Result_1_5_reg_980;
    grp_fu_349_p0 <= p_Result_6_reg_985;
    grp_fu_349_p1 <= p_Result_1_6_reg_990;
    grp_fu_353_p0 <= p_Result_7_reg_995;
    grp_fu_353_p1 <= p_Result_1_7_reg_1000;
    i_1_fu_490_p2 <= std_logic_vector(unsigned(i_reg_303) + unsigned(ap_const_lv9_1));
    i_op_assign_fu_377_p2 <= "0" when (r_V_fu_373_p1 = ap_const_lv8_0) else "1";

    indvar1_phi_fu_295_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000, exitcond_reg_892, indvar1_reg_291, indvar_next1_reg_896)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_892))) then 
            indvar1_phi_fu_295_p4 <= indvar_next1_reg_896;
        else 
            indvar1_phi_fu_295_p4 <= indvar1_reg_291;
        end if; 
    end process;

    indvar_next1_fu_474_p2 <= std_logic_vector(unsigned(indvar1_phi_fu_295_p4) + unsigned(ap_const_lv9_1));
    indvar_next2_fu_775_p2 <= std_logic_vector(unsigned(indvar2_reg_314) + unsigned(ap_const_lv9_1));
    indvar_next_fu_447_p2 <= std_logic_vector(unsigned(indvar_phi_fu_283_p4) + unsigned(ap_const_lv9_1));

    indvar_phi_fu_283_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond3_reg_877, indvar_reg_279, indvar_next_reg_881)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond3_reg_877 = ap_const_lv1_0))) then 
            indvar_phi_fu_283_p4 <= indvar_next_reg_881;
        else 
            indvar_phi_fu_283_p4 <= indvar_reg_279;
        end if; 
    end process;


    n_V_ap_vld_in_sig_assign_proc : process(n_V_ap_vld, n_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = n_V_ap_vld)) then 
            n_V_ap_vld_in_sig <= n_V_ap_vld;
        else 
            n_V_ap_vld_in_sig <= n_V_ap_vld_preg;
        end if; 
    end process;


    n_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, n_V_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            n_V_blk_n <= n_V_ap_vld;
        else 
            n_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_V_in_sig_assign_proc : process(n_V, n_V_preg, n_V_ap_vld)
    begin
        if ((ap_const_logic_1 = n_V_ap_vld)) then 
            n_V_in_sig <= n_V;
        else 
            n_V_in_sig <= n_V_preg;
        end if; 
    end process;

    p_Repl2_1_fu_717_p1 <= tmp_14_1_reg_1090;
    p_Repl2_2_fu_720_p1 <= tmp_14_2_reg_1095;
    p_Repl2_3_fu_723_p1 <= tmp_14_3_reg_1100;
    p_Repl2_4_fu_726_p1 <= tmp_14_4_reg_1105;
    p_Repl2_5_fu_729_p1 <= tmp_14_5_reg_1110;
    p_Repl2_6_fu_732_p1 <= tmp_14_6_reg_1115;
    p_Repl2_7_fu_735_p1 <= tmp_14_7_reg_1120;
    p_Repl2_s_fu_714_p1 <= tmp_11_reg_1085;
    r_V_1_fu_398_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(segment_V_fu_392_p2));
    r_V_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_824),9));
    r_V_fu_373_p1 <= n_V_in_sig(8 - 1 downto 0);
    s_1_fu_409_p2 <= std_logic_vector(unsigned(s_reg_238) + unsigned(ap_const_lv9_1));
    segment_V_fu_392_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_389_p1) + unsigned(tmp_cast_fu_383_p1));
    segment_len_V_fu_420_p3 <= 
        r_V_cast_reg_834 when (tmp_9_fu_415_p2(0) = '1') else 
        ap_const_lv9_100;
    tmp_12_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar2_reg_314),64));
    tmp_14_fu_506_p1 <= buff_b_q0(32 - 1 downto 0);
    tmp_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_indvar_reg_279),64));
    tmp_2_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_829),9));
    tmp_3_add_i32_shr_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(segment_len_V_reg_857),32));
    tmp_3_fu_502_p1 <= buff_a_q0(32 - 1 downto 0);
    tmp_4_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter1_indvar1_reg_291),64));
        tmp_5_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_addr_b_reg_259),64));

    tmp_6_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_303),64));
        tmp_7_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_addr_c_reg_269),64));

    tmp_9_fu_415_p2 <= "1" when (s_reg_238 = r_V_1_reg_844) else "0";
    tmp_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_819),9));
        tmp_s_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_addr_a_reg_249),64));

end behav;
