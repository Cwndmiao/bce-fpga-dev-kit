// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flvf1924-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=16,HLS_SYN_FF=5032,HLS_SYN_LUT=3620}" *)

module example (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_a_V_AWVALID,
        m_axi_a_V_AWREADY,
        m_axi_a_V_AWADDR,
        m_axi_a_V_AWID,
        m_axi_a_V_AWLEN,
        m_axi_a_V_AWSIZE,
        m_axi_a_V_AWBURST,
        m_axi_a_V_AWLOCK,
        m_axi_a_V_AWCACHE,
        m_axi_a_V_AWPROT,
        m_axi_a_V_AWQOS,
        m_axi_a_V_AWREGION,
        m_axi_a_V_AWUSER,
        m_axi_a_V_WVALID,
        m_axi_a_V_WREADY,
        m_axi_a_V_WDATA,
        m_axi_a_V_WSTRB,
        m_axi_a_V_WLAST,
        m_axi_a_V_WID,
        m_axi_a_V_WUSER,
        m_axi_a_V_ARVALID,
        m_axi_a_V_ARREADY,
        m_axi_a_V_ARADDR,
        m_axi_a_V_ARID,
        m_axi_a_V_ARLEN,
        m_axi_a_V_ARSIZE,
        m_axi_a_V_ARBURST,
        m_axi_a_V_ARLOCK,
        m_axi_a_V_ARCACHE,
        m_axi_a_V_ARPROT,
        m_axi_a_V_ARQOS,
        m_axi_a_V_ARREGION,
        m_axi_a_V_ARUSER,
        m_axi_a_V_RVALID,
        m_axi_a_V_RREADY,
        m_axi_a_V_RDATA,
        m_axi_a_V_RLAST,
        m_axi_a_V_RID,
        m_axi_a_V_RUSER,
        m_axi_a_V_RRESP,
        m_axi_a_V_BVALID,
        m_axi_a_V_BREADY,
        m_axi_a_V_BRESP,
        m_axi_a_V_BID,
        m_axi_a_V_BUSER,
        n_V,
        n_V_ap_vld,
        a_addr,
        a_addr_ap_vld,
        b_addr,
        b_addr_ap_vld,
        c_addr,
        c_addr_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'b00000;
parameter    ap_ST_fsm_state2 = 5'b1;
parameter    ap_ST_fsm_state3 = 5'b10;
parameter    ap_ST_fsm_state4 = 5'b11;
parameter    ap_ST_fsm_state5 = 5'b100;
parameter    ap_ST_fsm_state6 = 5'b101;
parameter    ap_ST_fsm_state7 = 5'b110;
parameter    ap_ST_fsm_state8 = 5'b111;
parameter    ap_ST_fsm_state9 = 5'b1000;
parameter    ap_ST_fsm_state10 = 5'b1001;
parameter    ap_ST_fsm_pp0_stage0 = 5'b1010;
parameter    ap_ST_fsm_state14 = 5'b1011;
parameter    ap_ST_fsm_state15 = 5'b1100;
parameter    ap_ST_fsm_state16 = 5'b1101;
parameter    ap_ST_fsm_state17 = 5'b1110;
parameter    ap_ST_fsm_state18 = 5'b1111;
parameter    ap_ST_fsm_state19 = 5'b10000;
parameter    ap_ST_fsm_state20 = 5'b10001;
parameter    ap_ST_fsm_pp1_stage0 = 5'b10010;
parameter    ap_ST_fsm_state24 = 5'b10011;
parameter    ap_ST_fsm_pp2_stage0 = 5'b10100;
parameter    ap_ST_fsm_state36 = 5'b10101;
parameter    ap_ST_fsm_pp3_stage0 = 5'b10110;
parameter    ap_ST_fsm_state40 = 5'b10111;
parameter    ap_ST_fsm_state41 = 5'b11000;
parameter    ap_ST_fsm_state42 = 5'b11001;
parameter    ap_ST_fsm_state43 = 5'b11010;
parameter    ap_ST_fsm_state44 = 5'b11011;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_M_AXI_A_V_ID_WIDTH = 1;
parameter    C_M_AXI_A_V_ADDR_WIDTH = 64;
parameter    C_M_AXI_A_V_DATA_WIDTH = 256;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_A_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_V_TARGET_ADDR = 0;
parameter    C_M_AXI_A_V_USER_VALUE = 0;
parameter    C_M_AXI_A_V_PROT_VALUE = 0;
parameter    C_M_AXI_A_V_CACHE_VALUE = 3;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv32_80 = 32'b10000000;
parameter    ap_const_lv32_9F = 32'b10011111;
parameter    ap_const_lv32_A0 = 32'b10100000;
parameter    ap_const_lv32_BF = 32'b10111111;
parameter    ap_const_lv32_C0 = 32'b11000000;
parameter    ap_const_lv32_DF = 32'b11011111;
parameter    ap_const_lv32_E0 = 32'b11100000;
parameter    ap_const_lv32_FF = 32'b11111111;
parameter    ap_const_lv32_100 = 32'b100000000;

parameter C_M_AXI_A_V_WSTRB_WIDTH = (C_M_AXI_A_V_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_a_V_AWVALID;
input   m_axi_a_V_AWREADY;
output  [C_M_AXI_A_V_ADDR_WIDTH - 1 : 0] m_axi_a_V_AWADDR;
output  [C_M_AXI_A_V_ID_WIDTH - 1 : 0] m_axi_a_V_AWID;
output  [7:0] m_axi_a_V_AWLEN;
output  [2:0] m_axi_a_V_AWSIZE;
output  [1:0] m_axi_a_V_AWBURST;
output  [1:0] m_axi_a_V_AWLOCK;
output  [3:0] m_axi_a_V_AWCACHE;
output  [2:0] m_axi_a_V_AWPROT;
output  [3:0] m_axi_a_V_AWQOS;
output  [3:0] m_axi_a_V_AWREGION;
output  [C_M_AXI_A_V_AWUSER_WIDTH - 1 : 0] m_axi_a_V_AWUSER;
output   m_axi_a_V_WVALID;
input   m_axi_a_V_WREADY;
output  [C_M_AXI_A_V_DATA_WIDTH - 1 : 0] m_axi_a_V_WDATA;
output  [C_M_AXI_A_V_WSTRB_WIDTH - 1 : 0] m_axi_a_V_WSTRB;
output   m_axi_a_V_WLAST;
output  [C_M_AXI_A_V_ID_WIDTH - 1 : 0] m_axi_a_V_WID;
output  [C_M_AXI_A_V_WUSER_WIDTH - 1 : 0] m_axi_a_V_WUSER;
output   m_axi_a_V_ARVALID;
input   m_axi_a_V_ARREADY;
output  [C_M_AXI_A_V_ADDR_WIDTH - 1 : 0] m_axi_a_V_ARADDR;
output  [C_M_AXI_A_V_ID_WIDTH - 1 : 0] m_axi_a_V_ARID;
output  [7:0] m_axi_a_V_ARLEN;
output  [2:0] m_axi_a_V_ARSIZE;
output  [1:0] m_axi_a_V_ARBURST;
output  [1:0] m_axi_a_V_ARLOCK;
output  [3:0] m_axi_a_V_ARCACHE;
output  [2:0] m_axi_a_V_ARPROT;
output  [3:0] m_axi_a_V_ARQOS;
output  [3:0] m_axi_a_V_ARREGION;
output  [C_M_AXI_A_V_ARUSER_WIDTH - 1 : 0] m_axi_a_V_ARUSER;
input   m_axi_a_V_RVALID;
output   m_axi_a_V_RREADY;
input  [C_M_AXI_A_V_DATA_WIDTH - 1 : 0] m_axi_a_V_RDATA;
input   m_axi_a_V_RLAST;
input  [C_M_AXI_A_V_ID_WIDTH - 1 : 0] m_axi_a_V_RID;
input  [C_M_AXI_A_V_RUSER_WIDTH - 1 : 0] m_axi_a_V_RUSER;
input  [1:0] m_axi_a_V_RRESP;
input   m_axi_a_V_BVALID;
output   m_axi_a_V_BREADY;
input  [1:0] m_axi_a_V_BRESP;
input  [C_M_AXI_A_V_ID_WIDTH - 1 : 0] m_axi_a_V_BID;
input  [C_M_AXI_A_V_BUSER_WIDTH - 1 : 0] m_axi_a_V_BUSER;
input  [15:0] n_V;
input   n_V_ap_vld;
input  [31:0] a_addr;
input   a_addr_ap_vld;
input  [31:0] b_addr;
input   b_addr_ap_vld;
input  [31:0] c_addr;
input   c_addr_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
reg   [4:0] ap_CS_fsm;
reg   [15:0] n_V_preg;
reg   [15:0] n_V_in_sig;
reg    n_V_ap_vld_preg;
reg    n_V_ap_vld_in_sig;
reg   [31:0] a_addr_preg;
reg   [31:0] a_addr_in_sig;
reg    a_addr_ap_vld_preg;
reg    a_addr_ap_vld_in_sig;
reg   [31:0] b_addr_preg;
reg   [31:0] b_addr_in_sig;
reg    b_addr_ap_vld_preg;
reg    b_addr_ap_vld_in_sig;
reg   [31:0] c_addr_preg;
reg   [31:0] c_addr_in_sig;
reg    c_addr_ap_vld_preg;
reg    c_addr_ap_vld_in_sig;
reg    a_V_blk_n_AR;
reg    a_V_blk_n_R;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond3_reg_877;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond_reg_892;
reg    a_V_blk_n_AW;
reg    a_V_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] exitcond4_reg_1130;
reg   [0:0] ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130;
reg    a_V_blk_n_B;
reg    n_V_blk_n;
reg    a_addr_blk_n;
reg    b_addr_blk_n;
reg    c_addr_blk_n;
reg    a_V_AWVALID;
wire    a_V_AWREADY;
reg    a_V_WVALID;
wire    a_V_WREADY;
reg    a_V_ARVALID;
wire    a_V_ARREADY;
reg   [63:0] a_V_ARADDR;
reg   [31:0] a_V_ARLEN;
wire    a_V_RVALID;
reg    a_V_RREADY;
wire   [255:0] a_V_RDATA;
wire    a_V_RLAST;
wire   [0:0] a_V_RID;
wire   [0:0] a_V_RUSER;
wire   [1:0] a_V_RRESP;
wire    a_V_BVALID;
reg    a_V_BREADY;
wire   [1:0] a_V_BRESP;
wire   [0:0] a_V_BID;
wire   [0:0] a_V_BUSER;
reg   [8:0] indvar_reg_279;
reg   [8:0] ap_pipeline_reg_pp0_iter1_indvar_reg_279;
reg   [8:0] indvar1_reg_291;
reg   [8:0] ap_pipeline_reg_pp1_iter1_indvar1_reg_291;
reg   [8:0] i_reg_303;
reg   [8:0] indvar2_reg_314;
reg   [255:0] reg_357;
reg    ap_condition_292;
reg   [7:0] tmp_reg_819;
wire   [7:0] r_V_fu_373_p1;
reg   [7:0] r_V_reg_824;
wire   [0:0] i_op_assign_fu_377_p2;
reg   [0:0] i_op_assign_reg_829;
wire   [8:0] r_V_cast_fu_386_p1;
reg   [8:0] r_V_cast_reg_834;
wire   [8:0] segment_V_fu_392_p2;
reg   [8:0] segment_V_reg_839;
wire   [8:0] r_V_1_fu_398_p2;
reg   [8:0] r_V_1_reg_844;
wire   [8:0] s_1_fu_409_p2;
reg   [8:0] s_1_reg_852;
wire   [8:0] segment_len_V_fu_420_p3;
reg   [8:0] segment_len_V_reg_857;
wire   [0:0] exitcond1_fu_404_p2;
reg    ap_sig_ioackin_a_V_ARREADY;
wire   [31:0] tmp_3_add_i32_shr_fu_438_p1;
reg   [31:0] tmp_3_add_i32_shr_reg_872;
wire   [0:0] exitcond3_fu_442_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond3_reg_877;
wire   [8:0] indvar_next_fu_447_p2;
reg   [8:0] indvar_next_reg_881;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_469_p2;
reg   [0:0] ap_pipeline_reg_pp1_iter1_exitcond_reg_892;
wire   [8:0] indvar_next1_fu_474_p2;
reg   [8:0] indvar_next1_reg_896;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond2_fu_485_p2;
reg   [0:0] exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter2_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter3_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter4_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter5_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter6_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter7_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter8_exitcond2_reg_901;
reg   [0:0] ap_pipeline_reg_pp2_iter9_exitcond2_reg_901;
wire   [8:0] i_1_fu_490_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] tmp_6_fu_496_p1;
reg   [63:0] tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter1_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter2_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter3_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter4_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter5_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter6_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter7_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter8_tmp_6_reg_910;
reg   [63:0] ap_pipeline_reg_pp2_iter9_tmp_6_reg_910;
wire   [31:0] tmp_3_fu_502_p1;
reg   [31:0] tmp_3_reg_925;
wire   [31:0] tmp_14_fu_506_p1;
reg   [31:0] tmp_14_reg_930;
reg   [31:0] p_Result_s_reg_935;
reg   [31:0] p_Result_1_1_reg_940;
reg   [31:0] p_Result_2_reg_945;
reg   [31:0] p_Result_1_2_reg_950;
reg   [31:0] p_Result_3_reg_955;
reg   [31:0] p_Result_1_3_reg_960;
reg   [31:0] p_Result_4_reg_965;
reg   [31:0] p_Result_1_4_reg_970;
reg   [31:0] p_Result_5_reg_975;
reg   [31:0] p_Result_1_5_reg_980;
reg   [31:0] p_Result_6_reg_985;
reg   [31:0] p_Result_1_6_reg_990;
reg   [31:0] p_Result_7_reg_995;
reg   [31:0] p_Result_1_7_reg_1000;
wire   [31:0] grp_fu_325_p2;
reg   [31:0] tmp_11_reg_1085;
wire   [31:0] grp_fu_329_p2;
reg   [31:0] tmp_14_1_reg_1090;
wire   [31:0] grp_fu_333_p2;
reg   [31:0] tmp_14_2_reg_1095;
wire   [31:0] grp_fu_337_p2;
reg   [31:0] tmp_14_3_reg_1100;
wire   [31:0] grp_fu_341_p2;
reg   [31:0] tmp_14_4_reg_1105;
wire   [31:0] grp_fu_345_p2;
reg   [31:0] tmp_14_5_reg_1110;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] tmp_14_6_reg_1115;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] tmp_14_7_reg_1120;
reg    ap_sig_ioackin_a_V_AWREADY;
wire   [0:0] exitcond4_fu_770_p2;
reg    ap_sig_ioackin_a_V_WREADY;
wire   [8:0] indvar_next2_fu_775_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [255:0] buff_V_q0;
reg   [255:0] buff_V_load_reg_1144;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] curr_addr_a_1_fu_786_p2;
reg   [31:0] curr_addr_a_1_reg_1149;
wire   [31:0] curr_addr_b_1_fu_792_p2;
reg   [31:0] curr_addr_b_1_reg_1154;
wire   [31:0] curr_addr_c_1_fu_798_p2;
reg   [31:0] curr_addr_c_1_reg_1159;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg   [7:0] buff_a_address0;
reg    buff_a_ce0;
reg    buff_a_we0;
wire   [255:0] buff_a_q0;
reg   [7:0] buff_b_address0;
reg    buff_b_ce0;
reg    buff_b_we0;
wire   [255:0] buff_b_q0;
reg   [7:0] buff_V_address0;
reg    buff_V_ce0;
reg    buff_V_we0;
wire   [255:0] buff_V_d0;
reg   [8:0] s_reg_238;
reg   [31:0] curr_addr_a_reg_249;
reg   [31:0] curr_addr_b_reg_259;
reg   [31:0] curr_addr_c_reg_269;
reg   [8:0] indvar_phi_fu_283_p4;
reg   [8:0] indvar1_phi_fu_295_p4;
wire   [63:0] tmp_1_fu_453_p1;
wire   [63:0] tmp_4_fu_480_p1;
wire   [63:0] tmp_12_fu_781_p1;
wire  signed [63:0] tmp_s_fu_427_p1;
wire  signed [63:0] tmp_5_fu_458_p1;
wire   [63:0] tmp_7_fu_759_p1;
reg    ap_reg_ioackin_a_V_ARREADY;
reg    ap_reg_ioackin_a_V_AWREADY;
reg    ap_reg_ioackin_a_V_WREADY;
wire   [31:0] grp_fu_325_p0;
wire   [31:0] grp_fu_325_p1;
wire   [31:0] grp_fu_329_p0;
wire   [31:0] grp_fu_329_p1;
wire   [31:0] grp_fu_333_p0;
wire   [31:0] grp_fu_333_p1;
wire   [31:0] grp_fu_337_p0;
wire   [31:0] grp_fu_337_p1;
wire   [31:0] grp_fu_341_p0;
wire   [31:0] grp_fu_341_p1;
wire   [31:0] grp_fu_345_p0;
wire   [31:0] grp_fu_345_p1;
wire   [31:0] grp_fu_349_p0;
wire   [31:0] grp_fu_349_p1;
wire   [31:0] grp_fu_353_p0;
wire   [31:0] grp_fu_353_p1;
wire   [8:0] tmp_2_cast_fu_389_p1;
wire   [8:0] tmp_cast_fu_383_p1;
wire   [0:0] tmp_9_fu_415_p2;
wire   [31:0] p_Repl2_7_fu_735_p1;
wire   [31:0] p_Repl2_6_fu_732_p1;
wire   [31:0] p_Repl2_5_fu_729_p1;
wire   [31:0] p_Repl2_4_fu_726_p1;
wire   [31:0] p_Repl2_3_fu_723_p1;
wire   [31:0] p_Repl2_2_fu_720_p1;
wire   [31:0] p_Repl2_1_fu_717_p1;
wire   [31:0] p_Repl2_s_fu_714_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_condition_599;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b00000;
#0 n_V_preg = 16'b0000000000000000;
#0 n_V_ap_vld_preg = 1'b0;
#0 a_addr_preg = 32'b00000000000000000000000000000000;
#0 a_addr_ap_vld_preg = 1'b0;
#0 b_addr_preg = 32'b00000000000000000000000000000000;
#0 b_addr_ap_vld_preg = 1'b0;
#0 c_addr_preg = 32'b00000000000000000000000000000000;
#0 c_addr_ap_vld_preg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_reg_ioackin_a_V_ARREADY = 1'b0;
#0 ap_reg_ioackin_a_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_a_V_WREADY = 1'b0;
end

example_a_V_m_axi #(
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_A_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_A_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_V_CACHE_VALUE ))
example_a_V_m_axi_U(
    .AWVALID(m_axi_a_V_AWVALID),
    .AWREADY(m_axi_a_V_AWREADY),
    .AWADDR(m_axi_a_V_AWADDR),
    .AWID(m_axi_a_V_AWID),
    .AWLEN(m_axi_a_V_AWLEN),
    .AWSIZE(m_axi_a_V_AWSIZE),
    .AWBURST(m_axi_a_V_AWBURST),
    .AWLOCK(m_axi_a_V_AWLOCK),
    .AWCACHE(m_axi_a_V_AWCACHE),
    .AWPROT(m_axi_a_V_AWPROT),
    .AWQOS(m_axi_a_V_AWQOS),
    .AWREGION(m_axi_a_V_AWREGION),
    .AWUSER(m_axi_a_V_AWUSER),
    .WVALID(m_axi_a_V_WVALID),
    .WREADY(m_axi_a_V_WREADY),
    .WDATA(m_axi_a_V_WDATA),
    .WSTRB(m_axi_a_V_WSTRB),
    .WLAST(m_axi_a_V_WLAST),
    .WID(m_axi_a_V_WID),
    .WUSER(m_axi_a_V_WUSER),
    .ARVALID(m_axi_a_V_ARVALID),
    .ARREADY(m_axi_a_V_ARREADY),
    .ARADDR(m_axi_a_V_ARADDR),
    .ARID(m_axi_a_V_ARID),
    .ARLEN(m_axi_a_V_ARLEN),
    .ARSIZE(m_axi_a_V_ARSIZE),
    .ARBURST(m_axi_a_V_ARBURST),
    .ARLOCK(m_axi_a_V_ARLOCK),
    .ARCACHE(m_axi_a_V_ARCACHE),
    .ARPROT(m_axi_a_V_ARPROT),
    .ARQOS(m_axi_a_V_ARQOS),
    .ARREGION(m_axi_a_V_ARREGION),
    .ARUSER(m_axi_a_V_ARUSER),
    .RVALID(m_axi_a_V_RVALID),
    .RREADY(m_axi_a_V_RREADY),
    .RDATA(m_axi_a_V_RDATA),
    .RLAST(m_axi_a_V_RLAST),
    .RID(m_axi_a_V_RID),
    .RUSER(m_axi_a_V_RUSER),
    .RRESP(m_axi_a_V_RRESP),
    .BVALID(m_axi_a_V_BVALID),
    .BREADY(m_axi_a_V_BREADY),
    .BRESP(m_axi_a_V_BRESP),
    .BID(m_axi_a_V_BID),
    .BUSER(m_axi_a_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(a_V_ARVALID),
    .I_ARREADY(a_V_ARREADY),
    .I_ARADDR(a_V_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(a_V_ARLEN),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(a_V_RVALID),
    .I_RREADY(a_V_RREADY),
    .I_RDATA(a_V_RDATA),
    .I_RID(a_V_RID),
    .I_RUSER(a_V_RUSER),
    .I_RRESP(a_V_RRESP),
    .I_RLAST(a_V_RLAST),
    .I_AWVALID(a_V_AWVALID),
    .I_AWREADY(a_V_AWREADY),
    .I_AWADDR(tmp_7_fu_759_p1),
    .I_AWID(1'b0),
    .I_AWLEN(tmp_3_add_i32_shr_reg_872),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(a_V_WVALID),
    .I_WREADY(a_V_WREADY),
    .I_WDATA(buff_V_load_reg_1144),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv32_FFFFFFFF),
    .I_BVALID(a_V_BVALID),
    .I_BREADY(a_V_BREADY),
    .I_BRESP(a_V_BRESP),
    .I_BID(a_V_BID),
    .I_BUSER(a_V_BUSER)
);

example_buff_a #(
    .DataWidth( 256 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buff_a_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_a_address0),
    .ce0(buff_a_ce0),
    .we0(buff_a_we0),
    .d0(reg_357),
    .q0(buff_a_q0)
);

example_buff_a #(
    .DataWidth( 256 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buff_b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_b_address0),
    .ce0(buff_b_ce0),
    .we0(buff_b_we0),
    .d0(reg_357),
    .q0(buff_b_q0)
);

example_buff_a #(
    .DataWidth( 256 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buff_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_V_address0),
    .ce0(buff_V_ce0),
    .we0(buff_V_we0),
    .d0(buff_V_d0),
    .q0(buff_V_q0)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_325_p0),
    .din1(grp_fu_325_p1),
    .ce(1'b1),
    .dout(grp_fu_325_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_329_p0),
    .din1(grp_fu_329_p1),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .ce(1'b1),
    .dout(grp_fu_333_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_337_p0),
    .din1(grp_fu_337_p1),
    .ce(1'b1),
    .dout(grp_fu_337_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_341_p0),
    .din1(grp_fu_341_p1),
    .ce(1'b1),
    .dout(grp_fu_341_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_349_p0),
    .din1(grp_fu_349_p1),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

example_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32nsbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_353_p0),
    .din1(grp_fu_353_p1),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_addr_ap_vld_preg <= 1'b0;
    end else begin
        if (((ap_ST_fsm_state3 == ap_CS_fsm) & ~(1'b0 == exitcond1_fu_404_p2))) begin
            a_addr_ap_vld_preg <= 1'b0;
        end else if ((~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)) & (1'b1 == a_addr_ap_vld))) begin
            a_addr_ap_vld_preg <= a_addr_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_addr_preg <= ap_const_lv32_0;
    end else begin
        if ((~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)) & (1'b1 == a_addr_ap_vld))) begin
            a_addr_preg <= a_addr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & ~(1'b0 == exitcond3_fu_442_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((ap_ST_fsm_state10 == ap_CS_fsm)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b0 == exitcond3_fu_442_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((ap_ST_fsm_state10 == ap_CS_fsm) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & ~(1'b0 == exitcond3_fu_442_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((ap_ST_fsm_state10 == ap_CS_fsm)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & ~(1'b0 == exitcond_fu_469_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((ap_ST_fsm_state20 == ap_CS_fsm)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b0 == exitcond_fu_469_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((ap_ST_fsm_state20 == ap_CS_fsm) | ((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & ~(1'b0 == exitcond_fu_469_p2)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((ap_ST_fsm_state20 == ap_CS_fsm)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & ~(1'b0 == exitcond2_fu_485_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((ap_ST_fsm_state24 == ap_CS_fsm)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b0 == exitcond2_fu_485_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if (((ap_ST_fsm_state24 == ap_CS_fsm) | ((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & ~(1'b0 == exitcond2_fu_485_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & ~(1'b0 == exitcond4_fu_770_p2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((ap_ST_fsm_state36 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_AWREADY))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & (1'b0 == exitcond4_fu_770_p2))) begin
            ap_enable_reg_pp3_iter1 <= 1'b1;
        end else if ((((ap_ST_fsm_state36 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_AWREADY)) | ((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & ~(1'b0 == exitcond4_fu_770_p2)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((ap_ST_fsm_state36 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_AWREADY))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_V_ARREADY <= 1'b0;
    end else begin
        if ((((ap_ST_fsm_state4 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_ARREADY)) | ((ap_ST_fsm_state14 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_ARREADY)))) begin
            ap_reg_ioackin_a_V_ARREADY <= 1'b0;
        end else if ((((ap_ST_fsm_state4 == ap_CS_fsm) & (1'b1 == a_V_ARREADY)) | ((ap_ST_fsm_state14 == ap_CS_fsm) & (1'b1 == a_V_ARREADY)))) begin
            ap_reg_ioackin_a_V_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_V_AWREADY <= 1'b0;
    end else begin
        if ((ap_ST_fsm_state36 == ap_CS_fsm)) begin
            if (~(1'b0 == ap_sig_ioackin_a_V_AWREADY)) begin
                ap_reg_ioackin_a_V_AWREADY <= 1'b0;
            end else if ((1'b1 == a_V_AWREADY)) begin
                ap_reg_ioackin_a_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_V_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130))) begin
            if ((ap_condition_599 == 1'b1)) begin
                ap_reg_ioackin_a_V_WREADY <= 1'b0;
            end else if ((1'b1 == a_V_WREADY)) begin
                ap_reg_ioackin_a_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_addr_ap_vld_preg <= 1'b0;
    end else begin
        if (((ap_ST_fsm_state3 == ap_CS_fsm) & ~(1'b0 == exitcond1_fu_404_p2))) begin
            b_addr_ap_vld_preg <= 1'b0;
        end else if ((~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)) & (1'b1 == b_addr_ap_vld))) begin
            b_addr_ap_vld_preg <= b_addr_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_addr_preg <= ap_const_lv32_0;
    end else begin
        if ((~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)) & (1'b1 == b_addr_ap_vld))) begin
            b_addr_preg <= b_addr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_addr_ap_vld_preg <= 1'b0;
    end else begin
        if (((ap_ST_fsm_state3 == ap_CS_fsm) & ~(1'b0 == exitcond1_fu_404_p2))) begin
            c_addr_ap_vld_preg <= 1'b0;
        end else if ((~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)) & (1'b1 == c_addr_ap_vld))) begin
            c_addr_ap_vld_preg <= c_addr_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_addr_preg <= ap_const_lv32_0;
    end else begin
        if ((~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)) & (1'b1 == c_addr_ap_vld))) begin
            c_addr_preg <= c_addr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        n_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((ap_ST_fsm_state3 == ap_CS_fsm) & ~(1'b0 == exitcond1_fu_404_p2))) begin
            n_V_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == n_V_ap_vld) & ~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)))) begin
            n_V_ap_vld_preg <= n_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        n_V_preg <= ap_const_lv16_0;
    end else begin
        if (((1'b1 == n_V_ap_vld) & ~((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm)))) begin
            n_V_preg <= n_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state44 == ap_CS_fsm) & ~(a_V_BVALID == 1'b0))) begin
        curr_addr_a_reg_249 <= curr_addr_a_1_reg_1149;
    end else if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        curr_addr_a_reg_249 <= a_addr_in_sig;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state44 == ap_CS_fsm) & ~(a_V_BVALID == 1'b0))) begin
        curr_addr_b_reg_259 <= curr_addr_b_1_reg_1154;
    end else if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        curr_addr_b_reg_259 <= b_addr_in_sig;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state44 == ap_CS_fsm) & ~(a_V_BVALID == 1'b0))) begin
        curr_addr_c_reg_269 <= curr_addr_c_1_reg_1159;
    end else if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        curr_addr_c_reg_269 <= c_addr_in_sig;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state24 == ap_CS_fsm)) begin
        i_reg_303 <= ap_const_lv9_0;
    end else if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond2_fu_485_p2))) begin
        i_reg_303 <= i_1_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)))) begin
        indvar1_reg_291 <= indvar_next1_reg_896;
    end else if ((ap_ST_fsm_state20 == ap_CS_fsm)) begin
        indvar1_reg_291 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond4_fu_770_p2))) begin
        indvar2_reg_314 <= indvar_next2_fu_775_p2;
    end else if (((ap_ST_fsm_state36 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_AWREADY))) begin
        indvar2_reg_314 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)))) begin
        indvar_reg_279 <= indvar_next_reg_881;
    end else if ((ap_ST_fsm_state10 == ap_CS_fsm)) begin
        indvar_reg_279 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state44 == ap_CS_fsm) & ~(a_V_BVALID == 1'b0))) begin
        s_reg_238 <= s_1_reg_852;
    end else if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        s_reg_238 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter1_exitcond3_reg_877 <= exitcond3_reg_877;
        ap_pipeline_reg_pp0_iter1_indvar_reg_279 <= indvar_reg_279;
        exitcond3_reg_877 <= exitcond3_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp1_iter1_exitcond_reg_892 <= exitcond_reg_892;
        ap_pipeline_reg_pp1_iter1_indvar1_reg_291 <= indvar1_reg_291;
        exitcond_reg_892 <= exitcond_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_pp2_stage0 == ap_CS_fsm)) begin
        ap_pipeline_reg_pp2_iter1_exitcond2_reg_901 <= exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter1_tmp_6_reg_910[8 : 0] <= tmp_6_reg_910[8 : 0];
        exitcond2_reg_901 <= exitcond2_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_pipeline_reg_pp2_iter2_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter1_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter2_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter1_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter3_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter2_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter3_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter2_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter4_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter3_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter4_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter3_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter5_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter4_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter5_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter4_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter6_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter5_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter6_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter5_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter7_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter6_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter7_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter6_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter8_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter7_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter8_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter7_tmp_6_reg_910[8 : 0];
        ap_pipeline_reg_pp2_iter9_exitcond2_reg_901 <= ap_pipeline_reg_pp2_iter8_exitcond2_reg_901;
        ap_pipeline_reg_pp2_iter9_tmp_6_reg_910[8 : 0] <= ap_pipeline_reg_pp2_iter8_tmp_6_reg_910[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)))) begin
        ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 <= exitcond4_reg_1130;
        exitcond4_reg_1130 <= exitcond4_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond4_reg_1130))) begin
        buff_V_load_reg_1144 <= buff_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state40 == ap_CS_fsm)) begin
        curr_addr_a_1_reg_1149 <= curr_addr_a_1_fu_786_p2;
        curr_addr_b_1_reg_1154 <= curr_addr_b_1_fu_792_p2;
        curr_addr_c_1_reg_1159 <= curr_addr_c_1_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & ~(ap_condition_292 == 1'b1))) begin
        i_op_assign_reg_829 <= i_op_assign_fu_377_p2;
        r_V_reg_824 <= r_V_fu_373_p1;
        tmp_reg_819 <= {{n_V_in_sig[ap_const_lv32_F : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        indvar_next1_reg_896 <= indvar_next1_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_next_reg_881 <= indvar_next_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b0 == exitcond2_reg_901))) begin
        p_Result_1_1_reg_940 <= {{buff_b_q0[ap_const_lv32_3F : ap_const_lv32_20]}};
        p_Result_1_2_reg_950 <= {{buff_b_q0[ap_const_lv32_5F : ap_const_lv32_40]}};
        p_Result_1_3_reg_960 <= {{buff_b_q0[ap_const_lv32_7F : ap_const_lv32_60]}};
        p_Result_1_4_reg_970 <= {{buff_b_q0[ap_const_lv32_9F : ap_const_lv32_80]}};
        p_Result_1_5_reg_980 <= {{buff_b_q0[ap_const_lv32_BF : ap_const_lv32_A0]}};
        p_Result_1_6_reg_990 <= {{buff_b_q0[ap_const_lv32_DF : ap_const_lv32_C0]}};
        p_Result_1_7_reg_1000 <= {{buff_b_q0[ap_const_lv32_FF : ap_const_lv32_E0]}};
        p_Result_2_reg_945 <= {{buff_a_q0[ap_const_lv32_5F : ap_const_lv32_40]}};
        p_Result_3_reg_955 <= {{buff_a_q0[ap_const_lv32_7F : ap_const_lv32_60]}};
        p_Result_4_reg_965 <= {{buff_a_q0[ap_const_lv32_9F : ap_const_lv32_80]}};
        p_Result_5_reg_975 <= {{buff_a_q0[ap_const_lv32_BF : ap_const_lv32_A0]}};
        p_Result_6_reg_985 <= {{buff_a_q0[ap_const_lv32_DF : ap_const_lv32_C0]}};
        p_Result_7_reg_995 <= {{buff_a_q0[ap_const_lv32_FF : ap_const_lv32_E0]}};
        p_Result_s_reg_935 <= {{buff_a_q0[ap_const_lv32_3F : ap_const_lv32_20]}};
        tmp_14_reg_930 <= tmp_14_fu_506_p1;
        tmp_3_reg_925 <= tmp_3_fu_502_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        r_V_1_reg_844 <= r_V_1_fu_398_p2;
        r_V_cast_reg_834[7 : 0] <= r_V_cast_fu_386_p1[7 : 0];
        segment_V_reg_839 <= segment_V_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0))) | ((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0))))) begin
        reg_357 <= a_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        s_1_reg_852 <= s_1_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state3 == ap_CS_fsm) & (1'b0 == exitcond1_fu_404_p2))) begin
        segment_len_V_reg_857 <= segment_len_V_fu_420_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_pipeline_reg_pp2_iter8_exitcond2_reg_901)) begin
        tmp_11_reg_1085 <= grp_fu_325_p2;
        tmp_14_1_reg_1090 <= grp_fu_329_p2;
        tmp_14_2_reg_1095 <= grp_fu_333_p2;
        tmp_14_3_reg_1100 <= grp_fu_337_p2;
        tmp_14_4_reg_1105 <= grp_fu_341_p2;
        tmp_14_5_reg_1110 <= grp_fu_345_p2;
        tmp_14_6_reg_1115 <= grp_fu_349_p2;
        tmp_14_7_reg_1120 <= grp_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state4 == ap_CS_fsm) & ~(1'b0 == ap_sig_ioackin_a_V_ARREADY))) begin
        tmp_3_add_i32_shr_reg_872[8 : 0] <= tmp_3_add_i32_shr_fu_438_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b0 == exitcond2_fu_485_p2))) begin
        tmp_6_reg_910[8 : 0] <= tmp_6_fu_496_p1[8 : 0];
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_a_V_ARREADY)) begin
        if ((ap_ST_fsm_state14 == ap_CS_fsm)) begin
            a_V_ARADDR = tmp_5_fu_458_p1;
        end else if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
            a_V_ARADDR = tmp_s_fu_427_p1;
        end else begin
            a_V_ARADDR = 'bx;
        end
    end else begin
        a_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_a_V_ARREADY)) begin
        if ((ap_ST_fsm_state14 == ap_CS_fsm)) begin
            a_V_ARLEN = tmp_3_add_i32_shr_reg_872;
        end else if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
            a_V_ARLEN = tmp_3_add_i32_shr_fu_438_p1;
        end else begin
            a_V_ARLEN = 'bx;
        end
    end else begin
        a_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_state4 == ap_CS_fsm) & (1'b0 == ap_reg_ioackin_a_V_ARREADY)) | ((ap_ST_fsm_state14 == ap_CS_fsm) & (1'b0 == ap_reg_ioackin_a_V_ARREADY)))) begin
        a_V_ARVALID = 1'b1;
    end else begin
        a_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) & (1'b0 == ap_reg_ioackin_a_V_AWREADY))) begin
        a_V_AWVALID = 1'b1;
    end else begin
        a_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state44 == ap_CS_fsm) & ~(a_V_BVALID == 1'b0))) begin
        a_V_BREADY = 1'b1;
    end else begin
        a_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0))) | ((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0))))) begin
        a_V_RREADY = 1'b1;
    end else begin
        a_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_reg_ioackin_a_V_WREADY))) begin
        a_V_WVALID = 1'b1;
    end else begin
        a_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state4 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm))) begin
        a_V_blk_n_AR = m_axi_a_V_ARREADY;
    end else begin
        a_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state36 == ap_CS_fsm)) begin
        a_V_blk_n_AW = m_axi_a_V_AWREADY;
    end else begin
        a_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state44 == ap_CS_fsm)) begin
        a_V_blk_n_B = m_axi_a_V_BVALID;
    end else begin
        a_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0)) | ((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892)))) begin
        a_V_blk_n_R = m_axi_a_V_RVALID;
    end else begin
        a_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130))) begin
        a_V_blk_n_W = m_axi_a_V_WREADY;
    end else begin
        a_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == a_addr_ap_vld)) begin
        a_addr_ap_vld_in_sig = a_addr_ap_vld;
    end else begin
        a_addr_ap_vld_in_sig = a_addr_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & ~(ap_start == 1'b0))) begin
        a_addr_blk_n = a_addr_ap_vld;
    end else begin
        a_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == a_addr_ap_vld)) begin
        a_addr_in_sig = a_addr;
    end else begin
        a_addr_in_sig = a_addr_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state3 == ap_CS_fsm) & ~(1'b0 == exitcond1_fu_404_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_ST_fsm_state1 == ap_CS_fsm))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state3 == ap_CS_fsm) & ~(1'b0 == exitcond1_fu_404_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_a_V_ARREADY)) begin
        ap_sig_ioackin_a_V_ARREADY = a_V_ARREADY;
    end else begin
        ap_sig_ioackin_a_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_a_V_AWREADY)) begin
        ap_sig_ioackin_a_V_AWREADY = a_V_AWREADY;
    end else begin
        ap_sig_ioackin_a_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_a_V_WREADY)) begin
        ap_sig_ioackin_a_V_WREADY = a_V_WREADY;
    end else begin
        ap_sig_ioackin_a_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == b_addr_ap_vld)) begin
        b_addr_ap_vld_in_sig = b_addr_ap_vld;
    end else begin
        b_addr_ap_vld_in_sig = b_addr_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & ~(ap_start == 1'b0))) begin
        b_addr_blk_n = b_addr_ap_vld;
    end else begin
        b_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == b_addr_ap_vld)) begin
        b_addr_in_sig = b_addr;
    end else begin
        b_addr_in_sig = b_addr_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        buff_V_address0 = tmp_12_fu_781_p1;
    end else if ((1'b1 == ap_enable_reg_pp2_iter10)) begin
        buff_V_address0 = ap_pipeline_reg_pp2_iter9_tmp_6_reg_910;
    end else begin
        buff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp3_stage0 == ap_CS_fsm) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0)) | (1'b1 == ap_enable_reg_pp2_iter10))) begin
        buff_V_ce0 = 1'b1;
    end else begin
        buff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter10) & (1'b0 == ap_pipeline_reg_pp2_iter9_exitcond2_reg_901))) begin
        buff_V_we0 = 1'b1;
    end else begin
        buff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        buff_a_address0 = tmp_6_fu_496_p1;
    end else if ((1'b1 == ap_enable_reg_pp0_iter2)) begin
        buff_a_address0 = tmp_1_fu_453_p1;
    end else begin
        buff_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp2_iter0)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        buff_a_ce0 = 1'b1;
    end else begin
        buff_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond3_reg_877))) begin
        buff_a_we0 = 1'b1;
    end else begin
        buff_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        buff_b_address0 = tmp_6_fu_496_p1;
    end else if ((1'b1 == ap_enable_reg_pp1_iter2)) begin
        buff_b_address0 = tmp_4_fu_480_p1;
    end else begin
        buff_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp2_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp2_iter0)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2)))) begin
        buff_b_ce0 = 1'b1;
    end else begin
        buff_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_pipeline_reg_pp1_iter1_exitcond_reg_892))) begin
        buff_b_we0 = 1'b1;
    end else begin
        buff_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == c_addr_ap_vld)) begin
        c_addr_ap_vld_in_sig = c_addr_ap_vld;
    end else begin
        c_addr_ap_vld_in_sig = c_addr_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & ~(ap_start == 1'b0))) begin
        c_addr_blk_n = c_addr_ap_vld;
    end else begin
        c_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == c_addr_ap_vld)) begin
        c_addr_in_sig = c_addr;
    end else begin
        c_addr_in_sig = c_addr_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892))) begin
        indvar1_phi_fu_295_p4 = indvar_next1_reg_896;
    end else begin
        indvar1_phi_fu_295_p4 = indvar1_reg_291;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0))) begin
        indvar_phi_fu_283_p4 = indvar_next_reg_881;
    end else begin
        indvar_phi_fu_283_p4 = indvar_reg_279;
    end
end

always @ (*) begin
    if ((1'b1 == n_V_ap_vld)) begin
        n_V_ap_vld_in_sig = n_V_ap_vld;
    end else begin
        n_V_ap_vld_in_sig = n_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & ~(ap_start == 1'b0))) begin
        n_V_blk_n = n_V_ap_vld;
    end else begin
        n_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == n_V_ap_vld)) begin
        n_V_in_sig = n_V;
    end else begin
        n_V_in_sig = n_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_condition_292 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond1_fu_404_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == ap_sig_ioackin_a_V_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond3_fu_442_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond3_reg_877 == 1'b0) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond3_fu_442_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            if (~(1'b0 == ap_sig_ioackin_a_V_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) & ~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond_fu_469_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_reg_892) & (a_V_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond_fu_469_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter10) & ~(1'b1 == ap_enable_reg_pp2_iter9)) & ~((1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond2_fu_485_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond2_fu_485_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (~(1'b0 == ap_sig_ioackin_a_V_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp3_iter2) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & ~(1'b1 == ap_enable_reg_pp3_iter1)) & ~(~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond4_fu_770_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp3_iter2) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & ~(1'b1 == ap_enable_reg_pp3_iter1)) | (~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond4_fu_770_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (~(a_V_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_condition_292 = ((ap_start == 1'b0) | (c_addr_ap_vld_in_sig == 1'b0) | (b_addr_ap_vld_in_sig == 1'b0) | (a_addr_ap_vld_in_sig == 1'b0) | (n_V_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_condition_599 = ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130) & (1'b0 == ap_sig_ioackin_a_V_WREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buff_V_d0 = {{{{{{{{p_Repl2_7_fu_735_p1}, {p_Repl2_6_fu_732_p1}}, {p_Repl2_5_fu_729_p1}}, {p_Repl2_4_fu_726_p1}}, {p_Repl2_3_fu_723_p1}}, {p_Repl2_2_fu_720_p1}}, {p_Repl2_1_fu_717_p1}}, {p_Repl2_s_fu_714_p1}};

assign curr_addr_a_1_fu_786_p2 = (curr_addr_a_reg_249 + ap_const_lv32_100);

assign curr_addr_b_1_fu_792_p2 = (curr_addr_b_reg_259 + ap_const_lv32_100);

assign curr_addr_c_1_fu_798_p2 = (curr_addr_c_reg_269 + ap_const_lv32_100);

assign exitcond1_fu_404_p2 = ((s_reg_238 == segment_V_reg_839) ? 1'b1 : 1'b0);

assign exitcond2_fu_485_p2 = ((i_reg_303 == segment_len_V_reg_857) ? 1'b1 : 1'b0);

assign exitcond3_fu_442_p2 = ((indvar_phi_fu_283_p4 == segment_len_V_reg_857) ? 1'b1 : 1'b0);

assign exitcond4_fu_770_p2 = ((indvar2_reg_314 == segment_len_V_reg_857) ? 1'b1 : 1'b0);

assign exitcond_fu_469_p2 = ((indvar1_phi_fu_295_p4 == segment_len_V_reg_857) ? 1'b1 : 1'b0);

assign grp_fu_325_p0 = tmp_3_reg_925;

assign grp_fu_325_p1 = tmp_14_reg_930;

assign grp_fu_329_p0 = p_Result_s_reg_935;

assign grp_fu_329_p1 = p_Result_1_1_reg_940;

assign grp_fu_333_p0 = p_Result_2_reg_945;

assign grp_fu_333_p1 = p_Result_1_2_reg_950;

assign grp_fu_337_p0 = p_Result_3_reg_955;

assign grp_fu_337_p1 = p_Result_1_3_reg_960;

assign grp_fu_341_p0 = p_Result_4_reg_965;

assign grp_fu_341_p1 = p_Result_1_4_reg_970;

assign grp_fu_345_p0 = p_Result_5_reg_975;

assign grp_fu_345_p1 = p_Result_1_5_reg_980;

assign grp_fu_349_p0 = p_Result_6_reg_985;

assign grp_fu_349_p1 = p_Result_1_6_reg_990;

assign grp_fu_353_p0 = p_Result_7_reg_995;

assign grp_fu_353_p1 = p_Result_1_7_reg_1000;

assign i_1_fu_490_p2 = (i_reg_303 + ap_const_lv9_1);

assign i_op_assign_fu_377_p2 = ((r_V_fu_373_p1 != ap_const_lv8_0) ? 1'b1 : 1'b0);

assign indvar_next1_fu_474_p2 = (indvar1_phi_fu_295_p4 + ap_const_lv9_1);

assign indvar_next2_fu_775_p2 = (indvar2_reg_314 + ap_const_lv9_1);

assign indvar_next_fu_447_p2 = (indvar_phi_fu_283_p4 + ap_const_lv9_1);

assign p_Repl2_1_fu_717_p1 = tmp_14_1_reg_1090;

assign p_Repl2_2_fu_720_p1 = tmp_14_2_reg_1095;

assign p_Repl2_3_fu_723_p1 = tmp_14_3_reg_1100;

assign p_Repl2_4_fu_726_p1 = tmp_14_4_reg_1105;

assign p_Repl2_5_fu_729_p1 = tmp_14_5_reg_1110;

assign p_Repl2_6_fu_732_p1 = tmp_14_6_reg_1115;

assign p_Repl2_7_fu_735_p1 = tmp_14_7_reg_1120;

assign p_Repl2_s_fu_714_p1 = tmp_11_reg_1085;

assign r_V_1_fu_398_p2 = ($signed(ap_const_lv9_1FF) + $signed(segment_V_fu_392_p2));

assign r_V_cast_fu_386_p1 = r_V_reg_824;

assign r_V_fu_373_p1 = n_V_in_sig[7:0];

assign s_1_fu_409_p2 = (s_reg_238 + ap_const_lv9_1);

assign segment_V_fu_392_p2 = (tmp_2_cast_fu_389_p1 + tmp_cast_fu_383_p1);

assign segment_len_V_fu_420_p3 = ((tmp_9_fu_415_p2[0:0] === 1'b1) ? r_V_cast_reg_834 : ap_const_lv9_100);

assign tmp_12_fu_781_p1 = indvar2_reg_314;

assign tmp_14_fu_506_p1 = buff_b_q0[31:0];

assign tmp_1_fu_453_p1 = ap_pipeline_reg_pp0_iter1_indvar_reg_279;

assign tmp_2_cast_fu_389_p1 = i_op_assign_reg_829;

assign tmp_3_add_i32_shr_fu_438_p1 = segment_len_V_reg_857;

assign tmp_3_fu_502_p1 = buff_a_q0[31:0];

assign tmp_4_fu_480_p1 = ap_pipeline_reg_pp1_iter1_indvar1_reg_291;

assign tmp_5_fu_458_p1 = $signed(curr_addr_b_reg_259);

assign tmp_6_fu_496_p1 = i_reg_303;

assign tmp_7_fu_759_p1 = $signed(curr_addr_c_reg_269);

assign tmp_9_fu_415_p2 = ((s_reg_238 == r_V_1_reg_844) ? 1'b1 : 1'b0);

assign tmp_cast_fu_383_p1 = tmp_reg_819;

assign tmp_s_fu_427_p1 = $signed(curr_addr_a_reg_249);

always @ (posedge ap_clk) begin
    r_V_cast_reg_834[8] <= 1'b0;
    tmp_3_add_i32_shr_reg_872[31:9] <= 23'b00000000000000000000000;
    tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter1_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter2_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter3_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter4_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter5_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter6_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter7_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter8_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_pipeline_reg_pp2_iter9_tmp_6_reg_910[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //example
