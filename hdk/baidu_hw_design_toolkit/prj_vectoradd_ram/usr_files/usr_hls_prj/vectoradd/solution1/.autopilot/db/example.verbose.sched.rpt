

================================================================
== Vivado HLS Report for 'example'
================================================================
* Date:           Mon Jul  3 09:15:04 2017

* Version:        2016.4 (Build 1733598 on Wed Dec 14 22:59:20 MST 2016)
* Project:        vectoradd
* Solution:       solution1
* Product family: kintexu
* Target device:  xcku115-flvf1924-2-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.00|      3.50|        0.50|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+--------+-----+--------+---------+
    |    Latency   |   Interval   | Pipeline|
    | min |   max  | min |   max  |   Type  |
    +-----+--------+-----+--------+---------+
    |    2|  271874|    3|  271875|   none  |
    +-----+--------+-----+--------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------+-----+--------+-----------+-----------+-----------+---------+----------+
        |                           |    Latency   | Iteration |  Initiation Interval  |   Trip  |          |
        |         Loop Name         | min |   max  |  Latency  |  achieved |   target  |  Count  | Pipelined|
        +---------------------------+-----+--------+-----------+-----------+-----------+---------+----------+
        |- Loop 1                   |    0|  271872| 26 ~ 1062 |          -|          -| 0 ~ 256 |    no    |
        | + memcpy.buff_a.addr.a.V  |    0|     257|          3|          1|          1| 0 ~ 256 |    yes   |
        | + memcpy.buff_b.addr.a.V  |    0|     257|          3|          1|          1| 0 ~ 256 |    yes   |
        | + for_loop_N              |    0|     265|         11|          1|          1| 0 ~ 256 |    yes   |
        | + memcpy.a.V.buff.V.addr  |    0|     257|          3|          1|          1| 0 ~ 256 |    yes   |
        +---------------------------+-----+--------+-----------+-----------+-----------+---------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3
  * Pipeline-1: initiation interval (II) = 1, depth = 3
  * Pipeline-2: initiation interval (II) = 1, depth = 11
  * Pipeline-3: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 44
* Pipeline: 4
  Pipeline-0: II = 1, D = 3, States = { 11 12 13 }
  Pipeline-1: II = 1, D = 3, States = { 21 22 23 }
  Pipeline-2: II = 1, D = 11, States = { 25 26 27 28 29 30 31 32 33 34 35 }
  Pipeline-3: II = 1, D = 3, States = { 37 38 39 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / (!exitcond1)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	14  / (exitcond3)
	12  / (!exitcond3)
12 --> 
	13  / true
13 --> 
	11  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	24  / (exitcond)
	22  / (!exitcond)
22 --> 
	23  / true
23 --> 
	21  / true
24 --> 
	25  / true
25 --> 
	36  / (exitcond2)
	26  / (!exitcond2)
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	25  / true
36 --> 
	37  / true
37 --> 
	40  / (exitcond4)
	38  / (!exitcond4)
38 --> 
	39  / true
39 --> 
	37  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	3  / true
* FSM state operations: 

 <State 1>: 1.34ns
ST_1: c_addr_read (12)  [1/1] 0.00ns
arrayctor.loop1.preheader:6  %c_addr_read = call i32 @_ssdm_op_Read.ap_vld.i32(i32 %c_addr)

ST_1: b_addr_read (13)  [1/1] 0.00ns
arrayctor.loop1.preheader:7  %b_addr_read = call i32 @_ssdm_op_Read.ap_vld.i32(i32 %b_addr)

ST_1: a_addr_read (14)  [1/1] 0.00ns
arrayctor.loop1.preheader:8  %a_addr_read = call i32 @_ssdm_op_Read.ap_vld.i32(i32 %a_addr)

ST_1: n_V_read (15)  [1/1] 0.00ns
arrayctor.loop1.preheader:9  %n_V_read = call i16 @_ssdm_op_Read.ap_vld.i16(i16 %n_V)

ST_1: buff_a (16)  [1/1] 0.00ns
arrayctor.loop1.preheader:10  %buff_a = alloca [256 x i256], align 8

ST_1: buff_b (17)  [1/1] 0.00ns
arrayctor.loop1.preheader:11  %buff_b = alloca [256 x i256], align 8

ST_1: buff_V (18)  [1/1] 0.00ns  loc: src/example.cpp:111
arrayctor.loop1.preheader:12  %buff_V = alloca [256 x i256], align 8

ST_1: tmp (24)  [1/1] 0.00ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:18  %tmp = call i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16 %n_V_read, i32 8, i32 15)

ST_1: r_V (26)  [1/1] 0.00ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:20  %r_V = trunc i16 %n_V_read to i8

ST_1: i_op_assign (28)  [1/1] 1.34ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:22  %i_op_assign = icmp ne i8 %r_V, 0


 <State 2>: 2.54ns
ST_2: StgValue_55 (6)  [1/1] 0.00ns
arrayctor.loop1.preheader:0  call void (...)* @_ssdm_op_SpecBitsMap(i256* %a_V), !map !114

ST_2: StgValue_56 (7)  [1/1] 0.00ns
arrayctor.loop1.preheader:1  call void (...)* @_ssdm_op_SpecBitsMap(i16 %n_V), !map !120

ST_2: StgValue_57 (8)  [1/1] 0.00ns
arrayctor.loop1.preheader:2  call void (...)* @_ssdm_op_SpecBitsMap(i32 %a_addr), !map !126

ST_2: StgValue_58 (9)  [1/1] 0.00ns
arrayctor.loop1.preheader:3  call void (...)* @_ssdm_op_SpecBitsMap(i32 %b_addr), !map !130

ST_2: StgValue_59 (10)  [1/1] 0.00ns
arrayctor.loop1.preheader:4  call void (...)* @_ssdm_op_SpecBitsMap(i32 %c_addr), !map !134

ST_2: StgValue_60 (11)  [1/1] 0.00ns
arrayctor.loop1.preheader:5  call void (...)* @_ssdm_op_SpecTopModule([8 x i8]* @example_str) nounwind

ST_2: StgValue_61 (19)  [1/1] 0.00ns  loc: src/example.cpp:102
arrayctor.loop1.preheader:13  call void (...)* @_ssdm_op_SpecInterface(i32 %a_addr, [7 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: StgValue_62 (20)  [1/1] 0.00ns  loc: src/example.cpp:103
arrayctor.loop1.preheader:14  call void (...)* @_ssdm_op_SpecInterface(i32 %b_addr, [7 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: StgValue_63 (21)  [1/1] 0.00ns  loc: src/example.cpp:104
arrayctor.loop1.preheader:15  call void (...)* @_ssdm_op_SpecInterface(i32 %c_addr, [7 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: StgValue_64 (22)  [1/1] 0.00ns  loc: src/example.cpp:105
arrayctor.loop1.preheader:16  call void (...)* @_ssdm_op_SpecInterface(i16 %n_V, [7 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: StgValue_65 (23)  [1/1] 0.00ns  loc: src/example.cpp:106
arrayctor.loop1.preheader:17  call void (...)* @_ssdm_op_SpecInterface(i256* %a_V, [6 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: tmp_cast (25)  [1/1] 0.00ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:19  %tmp_cast = zext i8 %tmp to i9

ST_2: r_V_cast (27)  [1/1] 0.00ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:21  %r_V_cast = zext i8 %r_V to i9

ST_2: tmp_2_cast (29)  [1/1] 0.00ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:23  %tmp_2_cast = zext i1 %i_op_assign to i9

ST_2: segment_V (30)  [1/1] 1.24ns  loc: src/example.cpp:116
arrayctor.loop1.preheader:24  %segment_V = add i9 %tmp_2_cast, %tmp_cast

ST_2: r_V_1 (31)  [1/1] 1.30ns  loc: src/example.cpp:120
arrayctor.loop1.preheader:25  %r_V_1 = add i9 -1, %segment_V

ST_2: StgValue_71 (32)  [1/1] 0.89ns  loc: src/example.cpp:119
arrayctor.loop1.preheader:26  br label %0


 <State 3>: 2.04ns
ST_3: s (34)  [1/1] 0.00ns
:0  %s = phi i9 [ 0, %arrayctor.loop1.preheader ], [ %s_1, %memcpy.tail ]

ST_3: curr_addr_a (35)  [1/1] 0.00ns
:1  %curr_addr_a = phi i32 [ %a_addr_read, %arrayctor.loop1.preheader ], [ %curr_addr_a_1, %memcpy.tail ]

ST_3: curr_addr_b (36)  [1/1] 0.00ns
:2  %curr_addr_b = phi i32 [ %b_addr_read, %arrayctor.loop1.preheader ], [ %curr_addr_b_1, %memcpy.tail ]

ST_3: curr_addr_c (37)  [1/1] 0.00ns
:3  %curr_addr_c = phi i32 [ %c_addr_read, %arrayctor.loop1.preheader ], [ %curr_addr_c_1, %memcpy.tail ]

ST_3: exitcond1 (38)  [1/1] 1.33ns  loc: src/example.cpp:119
:4  %exitcond1 = icmp eq i9 %s, %segment_V

ST_3: s_1 (39)  [1/1] 1.30ns  loc: src/example.cpp:119
:5  %s_1 = add i9 %s, 1

ST_3: StgValue_78 (40)  [1/1] 0.00ns  loc: src/example.cpp:119
:6  br i1 %exitcond1, label %3, label %._crit_edge

ST_3: tmp_9 (43)  [1/1] 1.33ns  loc: src/example.cpp:120
._crit_edge:1  %tmp_9 = icmp eq i9 %s, %r_V_1

ST_3: segment_len_V (44)  [1/1] 0.71ns  loc: src/example.cpp:120
._crit_edge:2  %segment_len_V = select i1 %tmp_9, i9 %r_V_cast, i9 -256

ST_3: StgValue_81 (185)  [1/1] 0.00ns  loc: src/example.cpp:145
:0  ret void


 <State 4>: 3.50ns
ST_4: tmp_s (45)  [1/1] 0.00ns  loc: src/example.cpp:124
._crit_edge:3  %tmp_s = sext i32 %curr_addr_a to i64

ST_4: a_V_addr (46)  [1/1] 0.00ns  loc: src/example.cpp:124
._crit_edge:4  %a_V_addr = getelementptr i256* %a_V, i64 %tmp_s

ST_4: tmp_3_add_i32_shr (47)  [1/1] 0.00ns  loc: src/example.cpp:124
._crit_edge:5  %tmp_3_add_i32_shr = zext i9 %segment_len_V to i32

ST_4: a_V_addr_rd_req (48)  [7/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)


 <State 5>: 3.50ns
ST_5: a_V_addr_rd_req (48)  [6/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)


 <State 6>: 3.50ns
ST_6: a_V_addr_rd_req (48)  [5/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)


 <State 7>: 3.50ns
ST_7: a_V_addr_rd_req (48)  [4/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)


 <State 8>: 3.50ns
ST_8: a_V_addr_rd_req (48)  [3/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)


 <State 9>: 3.50ns
ST_9: a_V_addr_rd_req (48)  [2/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)


 <State 10>: 3.50ns
ST_10: empty (42)  [1/1] 0.00ns
._crit_edge:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 256, i64 0)

ST_10: a_V_addr_rd_req (48)  [1/7] 3.50ns  loc: src/example.cpp:124
._crit_edge:6  %a_V_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr, i32 %tmp_3_add_i32_shr)

ST_10: StgValue_93 (49)  [1/1] 0.89ns
._crit_edge:7  br label %burst.rd.header


 <State 11>: 1.33ns
ST_11: indvar (51)  [1/1] 0.00ns
burst.rd.header:0  %indvar = phi i9 [ 0, %._crit_edge ], [ %indvar_next, %burst.rd.body ]

ST_11: exitcond3 (52)  [1/1] 1.33ns  loc: src/example.cpp:120
burst.rd.header:1  %exitcond3 = icmp eq i9 %indvar, %segment_len_V

ST_11: indvar_next (53)  [1/1] 1.30ns
burst.rd.header:2  %indvar_next = add i9 %indvar, 1

ST_11: StgValue_97 (54)  [1/1] 0.00ns  loc: src/example.cpp:120
burst.rd.header:3  br i1 %exitcond3, label %burst.rd.end, label %burst.rd.body


 <State 12>: 3.50ns
ST_12: a_V_addr_read (60)  [1/1] 3.50ns  loc: src/example.cpp:124
burst.rd.body:4  %a_V_addr_read = call i256 @_ssdm_op_Read.m_axi.i256P(i256* %a_V_addr)


 <State 13>: 1.96ns
ST_13: empty_7 (56)  [1/1] 0.00ns
burst.rd.body:0  %empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 256, i64 0)

ST_13: burstread_rbegin (57)  [1/1] 0.00ns
burst.rd.body:1  %burstread_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([17 x i8]* @burstread_OC_region_s)

ST_13: StgValue_101 (58)  [1/1] 0.00ns
burst.rd.body:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str10)

ST_13: StgValue_102 (59)  [1/1] 0.00ns
burst.rd.body:3  call void (...)* @_ssdm_op_SpecLoopName([23 x i8]* @memcpy_OC_buff_a_OC_s)

ST_13: tmp_1 (61)  [1/1] 0.00ns  loc: src/example.cpp:124
burst.rd.body:5  %tmp_1 = zext i9 %indvar to i64

ST_13: buff_a_addr (62)  [1/1] 0.00ns  loc: src/example.cpp:124
burst.rd.body:6  %buff_a_addr = getelementptr [256 x i256]* %buff_a, i64 0, i64 %tmp_1

ST_13: StgValue_105 (63)  [1/1] 1.96ns  loc: src/example.cpp:124
burst.rd.body:7  store i256 %a_V_addr_read, i256* %buff_a_addr, align 8

ST_13: burstread_rend (64)  [1/1] 0.00ns
burst.rd.body:8  %burstread_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([17 x i8]* @burstread_OC_region_s, i32 %burstread_rbegin)

ST_13: StgValue_107 (65)  [1/1] 0.00ns
burst.rd.body:9  br label %burst.rd.header


 <State 14>: 3.50ns
ST_14: tmp_5 (67)  [1/1] 0.00ns  loc: src/example.cpp:125
burst.rd.end:0  %tmp_5 = sext i32 %curr_addr_b to i64

ST_14: a_V_addr_1 (68)  [1/1] 0.00ns  loc: src/example.cpp:125
burst.rd.end:1  %a_V_addr_1 = getelementptr i256* %a_V, i64 %tmp_5

ST_14: a_V_addr_1_rd_req (69)  [7/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)


 <State 15>: 3.50ns
ST_15: a_V_addr_1_rd_req (69)  [6/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)


 <State 16>: 3.50ns
ST_16: a_V_addr_1_rd_req (69)  [5/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)


 <State 17>: 3.50ns
ST_17: a_V_addr_1_rd_req (69)  [4/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)


 <State 18>: 3.50ns
ST_18: a_V_addr_1_rd_req (69)  [3/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)


 <State 19>: 3.50ns
ST_19: a_V_addr_1_rd_req (69)  [2/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)


 <State 20>: 3.50ns
ST_20: a_V_addr_1_rd_req (69)  [1/7] 3.50ns  loc: src/example.cpp:125
burst.rd.end:2  %a_V_addr_1_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i256P(i256* %a_V_addr_1, i32 %tmp_3_add_i32_shr)

ST_20: StgValue_117 (70)  [1/1] 0.89ns
burst.rd.end:3  br label %burst.rd.header9


 <State 21>: 1.33ns
ST_21: indvar1 (72)  [1/1] 0.00ns
burst.rd.header9:0  %indvar1 = phi i9 [ 0, %burst.rd.end ], [ %indvar_next1, %burst.rd.body10 ]

ST_21: exitcond (73)  [1/1] 1.33ns  loc: src/example.cpp:120
burst.rd.header9:1  %exitcond = icmp eq i9 %indvar1, %segment_len_V

ST_21: indvar_next1 (74)  [1/1] 1.30ns
burst.rd.header9:2  %indvar_next1 = add i9 %indvar1, 1

ST_21: StgValue_121 (75)  [1/1] 0.00ns  loc: src/example.cpp:120
burst.rd.header9:3  br i1 %exitcond, label %burst.rd.end8.preheader, label %burst.rd.body10


 <State 22>: 3.50ns
ST_22: a_V_addr_1_read (81)  [1/1] 3.50ns  loc: src/example.cpp:125
burst.rd.body10:4  %a_V_addr_1_read = call i256 @_ssdm_op_Read.m_axi.i256P(i256* %a_V_addr_1)


 <State 23>: 1.96ns
ST_23: empty_8 (77)  [1/1] 0.00ns
burst.rd.body10:0  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 256, i64 0)

ST_23: burstread_rbegin1 (78)  [1/1] 0.00ns
burst.rd.body10:1  %burstread_rbegin1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([17 x i8]* @burstread_OC_region_s)

ST_23: StgValue_125 (79)  [1/1] 0.00ns
burst.rd.body10:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str11)

ST_23: StgValue_126 (80)  [1/1] 0.00ns
burst.rd.body10:3  call void (...)* @_ssdm_op_SpecLoopName([23 x i8]* @memcpy_OC_buff_b_OC_s)

ST_23: tmp_4 (82)  [1/1] 0.00ns  loc: src/example.cpp:125
burst.rd.body10:5  %tmp_4 = zext i9 %indvar1 to i64

ST_23: buff_b_addr (83)  [1/1] 0.00ns  loc: src/example.cpp:125
burst.rd.body10:6  %buff_b_addr = getelementptr [256 x i256]* %buff_b, i64 0, i64 %tmp_4

ST_23: StgValue_129 (84)  [1/1] 1.96ns  loc: src/example.cpp:125
burst.rd.body10:7  store i256 %a_V_addr_1_read, i256* %buff_b_addr, align 8

ST_23: burstread_rend20 (85)  [1/1] 0.00ns
burst.rd.body10:8  %burstread_rend20 = call i32 (...)* @_ssdm_op_SpecRegionEnd([17 x i8]* @burstread_OC_region_s, i32 %burstread_rbegin1)

ST_23: StgValue_131 (86)  [1/1] 0.00ns
burst.rd.body10:9  br label %burst.rd.header9


 <State 24>: 0.89ns
ST_24: StgValue_132 (88)  [1/1] 0.89ns  loc: src/example.cpp:127
burst.rd.end8.preheader:0  br label %burst.rd.end8


 <State 25>: 2.04ns
ST_25: i (90)  [1/1] 0.00ns
burst.rd.end8:0  %i = phi i9 [ %i_1, %1 ], [ 0, %burst.rd.end8.preheader ]

ST_25: exitcond2 (91)  [1/1] 1.33ns  loc: src/example.cpp:127
burst.rd.end8:1  %exitcond2 = icmp eq i9 %i, %segment_len_V

ST_25: i_1 (92)  [1/1] 1.30ns  loc: src/example.cpp:127
burst.rd.end8:2  %i_1 = add i9 %i, 1

ST_25: StgValue_136 (93)  [1/1] 0.00ns  loc: src/example.cpp:127
burst.rd.end8:3  br i1 %exitcond2, label %2, label %1

ST_25: tmp_6 (99)  [1/1] 0.00ns  loc: src/example.cpp:130
:4  %tmp_6 = zext i9 %i to i64

ST_25: buff_a_addr_1 (100)  [1/1] 0.00ns  loc: src/example.cpp:130
:5  %buff_a_addr_1 = getelementptr [256 x i256]* %buff_a, i64 0, i64 %tmp_6

ST_25: buff_b_addr_1 (101)  [1/1] 0.00ns  loc: src/example.cpp:131
:6  %buff_b_addr_1 = getelementptr [256 x i256]* %buff_b, i64 0, i64 %tmp_6

ST_25: buff_a_load (102)  [2/2] 1.96ns  loc: src/example.cpp:130
:7  %buff_a_load = load i256* %buff_a_addr_1, align 32

ST_25: buff_b_load (104)  [2/2] 1.96ns  loc: src/example.cpp:131
:9  %buff_b_load = load i256* %buff_b_addr_1, align 32


 <State 26>: 1.96ns
ST_26: buff_a_load (102)  [1/2] 1.96ns  loc: src/example.cpp:130
:7  %buff_a_load = load i256* %buff_a_addr_1, align 32

ST_26: tmp_3 (103)  [1/1] 0.00ns  loc: src/example.cpp:130
:8  %tmp_3 = trunc i256 %buff_a_load to i32

ST_26: buff_b_load (104)  [1/2] 1.96ns  loc: src/example.cpp:131
:9  %buff_b_load = load i256* %buff_b_addr_1, align 32

ST_26: tmp_14 (105)  [1/1] 0.00ns  loc: src/example.cpp:131
:10  %tmp_14 = trunc i256 %buff_b_load to i32

ST_26: p_Result_s (110)  [1/1] 0.00ns  loc: src/example.cpp:130
:15  %p_Result_s = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 32, i32 63)

ST_26: p_Result_1_1 (111)  [1/1] 0.00ns  loc: src/example.cpp:131
:16  %p_Result_1_1 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 32, i32 63)

ST_26: p_Result_2 (116)  [1/1] 0.00ns  loc: src/example.cpp:130
:21  %p_Result_2 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 64, i32 95)

ST_26: p_Result_1_2 (117)  [1/1] 0.00ns  loc: src/example.cpp:131
:22  %p_Result_1_2 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 64, i32 95)

ST_26: p_Result_3 (122)  [1/1] 0.00ns  loc: src/example.cpp:130
:27  %p_Result_3 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 96, i32 127)

ST_26: p_Result_1_3 (123)  [1/1] 0.00ns  loc: src/example.cpp:131
:28  %p_Result_1_3 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 96, i32 127)

ST_26: p_Result_4 (128)  [1/1] 0.00ns  loc: src/example.cpp:130
:33  %p_Result_4 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 128, i32 159)

ST_26: p_Result_1_4 (129)  [1/1] 0.00ns  loc: src/example.cpp:131
:34  %p_Result_1_4 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 128, i32 159)

ST_26: p_Result_5 (134)  [1/1] 0.00ns  loc: src/example.cpp:130
:39  %p_Result_5 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 160, i32 191)

ST_26: p_Result_1_5 (135)  [1/1] 0.00ns  loc: src/example.cpp:131
:40  %p_Result_1_5 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 160, i32 191)

ST_26: p_Result_6 (140)  [1/1] 0.00ns  loc: src/example.cpp:130
:45  %p_Result_6 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 192, i32 223)

ST_26: p_Result_1_6 (141)  [1/1] 0.00ns  loc: src/example.cpp:131
:46  %p_Result_1_6 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 192, i32 223)

ST_26: p_Result_7 (146)  [1/1] 0.00ns  loc: src/example.cpp:130
:51  %p_Result_7 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_a_load, i32 224, i32 255)

ST_26: p_Result_1_7 (147)  [1/1] 0.00ns  loc: src/example.cpp:131
:52  %p_Result_1_7 = call i32 @_ssdm_op_PartSelect.i32.i256.i32.i32(i256 %buff_b_load, i32 224, i32 255)


 <State 27>: 3.45ns
ST_27: tmp_2 (106)  [1/1] 0.00ns  loc: src/example.cpp:132
:11  %tmp_2 = bitcast i32 %tmp_3 to float

ST_27: tmp_10 (107)  [1/1] 0.00ns  loc: src/example.cpp:132
:12  %tmp_10 = bitcast i32 %tmp_14 to float

ST_27: tmp_11 (108)  [8/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_27: tmp_12_1 (112)  [1/1] 0.00ns  loc: src/example.cpp:132
:17  %tmp_12_1 = bitcast i32 %p_Result_s to float

ST_27: tmp_13_1 (113)  [1/1] 0.00ns  loc: src/example.cpp:132
:18  %tmp_13_1 = bitcast i32 %p_Result_1_1 to float

ST_27: tmp_14_1 (114)  [8/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_27: tmp_12_2 (118)  [1/1] 0.00ns  loc: src/example.cpp:132
:23  %tmp_12_2 = bitcast i32 %p_Result_2 to float

ST_27: tmp_13_2 (119)  [1/1] 0.00ns  loc: src/example.cpp:132
:24  %tmp_13_2 = bitcast i32 %p_Result_1_2 to float

ST_27: tmp_14_2 (120)  [8/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_27: tmp_12_3 (124)  [1/1] 0.00ns  loc: src/example.cpp:132
:29  %tmp_12_3 = bitcast i32 %p_Result_3 to float

ST_27: tmp_13_3 (125)  [1/1] 0.00ns  loc: src/example.cpp:132
:30  %tmp_13_3 = bitcast i32 %p_Result_1_3 to float

ST_27: tmp_14_3 (126)  [8/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_27: tmp_12_4 (130)  [1/1] 0.00ns  loc: src/example.cpp:132
:35  %tmp_12_4 = bitcast i32 %p_Result_4 to float

ST_27: tmp_13_4 (131)  [1/1] 0.00ns  loc: src/example.cpp:132
:36  %tmp_13_4 = bitcast i32 %p_Result_1_4 to float

ST_27: tmp_14_4 (132)  [8/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_27: tmp_12_5 (136)  [1/1] 0.00ns  loc: src/example.cpp:132
:41  %tmp_12_5 = bitcast i32 %p_Result_5 to float

ST_27: tmp_13_5 (137)  [1/1] 0.00ns  loc: src/example.cpp:132
:42  %tmp_13_5 = bitcast i32 %p_Result_1_5 to float

ST_27: tmp_14_5 (138)  [8/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_27: tmp_12_6 (142)  [1/1] 0.00ns  loc: src/example.cpp:132
:47  %tmp_12_6 = bitcast i32 %p_Result_6 to float

ST_27: tmp_13_6 (143)  [1/1] 0.00ns  loc: src/example.cpp:132
:48  %tmp_13_6 = bitcast i32 %p_Result_1_6 to float

ST_27: tmp_14_6 (144)  [8/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_27: tmp_12_7 (148)  [1/1] 0.00ns  loc: src/example.cpp:132
:53  %tmp_12_7 = bitcast i32 %p_Result_7 to float

ST_27: tmp_13_7 (149)  [1/1] 0.00ns  loc: src/example.cpp:132
:54  %tmp_13_7 = bitcast i32 %p_Result_1_7 to float

ST_27: tmp_14_7 (150)  [8/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 28>: 3.45ns
ST_28: tmp_11 (108)  [7/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_28: tmp_14_1 (114)  [7/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_28: tmp_14_2 (120)  [7/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_28: tmp_14_3 (126)  [7/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_28: tmp_14_4 (132)  [7/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_28: tmp_14_5 (138)  [7/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_28: tmp_14_6 (144)  [7/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_28: tmp_14_7 (150)  [7/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 29>: 3.45ns
ST_29: tmp_11 (108)  [6/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_29: tmp_14_1 (114)  [6/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_29: tmp_14_2 (120)  [6/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_29: tmp_14_3 (126)  [6/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_29: tmp_14_4 (132)  [6/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_29: tmp_14_5 (138)  [6/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_29: tmp_14_6 (144)  [6/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_29: tmp_14_7 (150)  [6/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 30>: 3.45ns
ST_30: tmp_11 (108)  [5/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_30: tmp_14_1 (114)  [5/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_30: tmp_14_2 (120)  [5/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_30: tmp_14_3 (126)  [5/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_30: tmp_14_4 (132)  [5/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_30: tmp_14_5 (138)  [5/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_30: tmp_14_6 (144)  [5/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_30: tmp_14_7 (150)  [5/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 31>: 3.45ns
ST_31: tmp_11 (108)  [4/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_31: tmp_14_1 (114)  [4/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_31: tmp_14_2 (120)  [4/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_31: tmp_14_3 (126)  [4/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_31: tmp_14_4 (132)  [4/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_31: tmp_14_5 (138)  [4/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_31: tmp_14_6 (144)  [4/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_31: tmp_14_7 (150)  [4/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 32>: 3.45ns
ST_32: tmp_11 (108)  [3/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_32: tmp_14_1 (114)  [3/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_32: tmp_14_2 (120)  [3/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_32: tmp_14_3 (126)  [3/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_32: tmp_14_4 (132)  [3/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_32: tmp_14_5 (138)  [3/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_32: tmp_14_6 (144)  [3/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_32: tmp_14_7 (150)  [3/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 33>: 3.45ns
ST_33: tmp_11 (108)  [2/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_33: tmp_14_1 (114)  [2/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_33: tmp_14_2 (120)  [2/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_33: tmp_14_3 (126)  [2/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_33: tmp_14_4 (132)  [2/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_33: tmp_14_5 (138)  [2/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_33: tmp_14_6 (144)  [2/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_33: tmp_14_7 (150)  [2/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 34>: 3.45ns
ST_34: tmp_11 (108)  [1/8] 3.45ns  loc: src/example.cpp:132
:13  %tmp_11 = fadd float %tmp_2, %tmp_10

ST_34: tmp_14_1 (114)  [1/8] 3.45ns  loc: src/example.cpp:132
:19  %tmp_14_1 = fadd float %tmp_12_1, %tmp_13_1

ST_34: tmp_14_2 (120)  [1/8] 3.45ns  loc: src/example.cpp:132
:25  %tmp_14_2 = fadd float %tmp_12_2, %tmp_13_2

ST_34: tmp_14_3 (126)  [1/8] 3.45ns  loc: src/example.cpp:132
:31  %tmp_14_3 = fadd float %tmp_12_3, %tmp_13_3

ST_34: tmp_14_4 (132)  [1/8] 3.45ns  loc: src/example.cpp:132
:37  %tmp_14_4 = fadd float %tmp_12_4, %tmp_13_4

ST_34: tmp_14_5 (138)  [1/8] 3.45ns  loc: src/example.cpp:132
:43  %tmp_14_5 = fadd float %tmp_12_5, %tmp_13_5

ST_34: tmp_14_6 (144)  [1/8] 3.45ns  loc: src/example.cpp:132
:49  %tmp_14_6 = fadd float %tmp_12_6, %tmp_13_6

ST_34: tmp_14_7 (150)  [1/8] 3.45ns  loc: src/example.cpp:132
:55  %tmp_14_7 = fadd float %tmp_12_7, %tmp_13_7


 <State 35>: 1.96ns
ST_35: empty_9 (95)  [1/1] 0.00ns
:0  %empty_9 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 256, i64 0)

ST_35: StgValue_241 (96)  [1/1] 0.00ns  loc: src/example.cpp:127
:1  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str3) nounwind

ST_35: tmp_8 (97)  [1/1] 0.00ns  loc: src/example.cpp:127
:2  %tmp_8 = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str3)

ST_35: StgValue_243 (98)  [1/1] 0.00ns  loc: src/example.cpp:128
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_35: p_Repl2_s (109)  [1/1] 0.00ns  loc: src/example.cpp:132
:14  %p_Repl2_s = bitcast float %tmp_11 to i32

ST_35: p_Repl2_1 (115)  [1/1] 0.00ns  loc: src/example.cpp:132
:20  %p_Repl2_1 = bitcast float %tmp_14_1 to i32

ST_35: p_Repl2_2 (121)  [1/1] 0.00ns  loc: src/example.cpp:132
:26  %p_Repl2_2 = bitcast float %tmp_14_2 to i32

ST_35: p_Repl2_3 (127)  [1/1] 0.00ns  loc: src/example.cpp:132
:32  %p_Repl2_3 = bitcast float %tmp_14_3 to i32

ST_35: p_Repl2_4 (133)  [1/1] 0.00ns  loc: src/example.cpp:132
:38  %p_Repl2_4 = bitcast float %tmp_14_4 to i32

ST_35: p_Repl2_5 (139)  [1/1] 0.00ns  loc: src/example.cpp:132
:44  %p_Repl2_5 = bitcast float %tmp_14_5 to i32

ST_35: p_Repl2_6 (145)  [1/1] 0.00ns  loc: src/example.cpp:132
:50  %p_Repl2_6 = bitcast float %tmp_14_6 to i32

ST_35: p_Repl2_7 (151)  [1/1] 0.00ns  loc: src/example.cpp:132
:56  %p_Repl2_7 = bitcast float %tmp_14_7 to i32

ST_35: p_Result_s_10 (152)  [1/1] 0.00ns  loc: src/example.cpp:135
:57  %p_Result_s_10 = call i256 @_ssdm_op_BitConcatenate.i256.i32.i32.i32.i32.i32.i32.i32.i32(i32 %p_Repl2_7, i32 %p_Repl2_6, i32 %p_Repl2_5, i32 %p_Repl2_4, i32 %p_Repl2_3, i32 %p_Repl2_2, i32 %p_Repl2_1, i32 %p_Repl2_s)

ST_35: buff_V_addr (153)  [1/1] 0.00ns  loc: src/example.cpp:135
:58  %buff_V_addr = getelementptr [256 x i256]* %buff_V, i64 0, i64 %tmp_6

ST_35: StgValue_254 (154)  [1/1] 1.96ns  loc: src/example.cpp:135
:59  store i256 %p_Result_s_10, i256* %buff_V_addr, align 32

ST_35: empty_11 (155)  [1/1] 0.00ns  loc: src/example.cpp:137
:60  %empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str3, i32 %tmp_8)

ST_35: StgValue_256 (156)  [1/1] 0.00ns  loc: src/example.cpp:127
:61  br label %burst.rd.end8


 <State 36>: 3.50ns
ST_36: tmp_7 (158)  [1/1] 0.00ns  loc: src/example.cpp:139
:0  %tmp_7 = sext i32 %curr_addr_c to i64

ST_36: a_V_addr_2 (159)  [1/1] 0.00ns  loc: src/example.cpp:139
:1  %a_V_addr_2 = getelementptr i256* %a_V, i64 %tmp_7

ST_36: a_V_addr_2_wr_req (160)  [1/1] 3.50ns  loc: src/example.cpp:139
:2  %a_V_addr_2_wr_req = call i1 @_ssdm_op_WriteReq.m_axi.i256P(i256* %a_V_addr_2, i32 %tmp_3_add_i32_shr)

ST_36: StgValue_260 (161)  [1/1] 0.89ns
:3  br label %burst.wr.header


 <State 37>: 2.04ns
ST_37: indvar2 (163)  [1/1] 0.00ns
burst.wr.header:0  %indvar2 = phi i9 [ 0, %2 ], [ %indvar_next2, %burst.wr.body ]

ST_37: exitcond4 (164)  [1/1] 1.33ns  loc: src/example.cpp:120
burst.wr.header:1  %exitcond4 = icmp eq i9 %indvar2, %segment_len_V

ST_37: indvar_next2 (165)  [1/1] 1.30ns
burst.wr.header:2  %indvar_next2 = add i9 %indvar2, 1

ST_37: StgValue_264 (166)  [1/1] 0.00ns  loc: src/example.cpp:120
burst.wr.header:3  br i1 %exitcond4, label %memcpy.tail, label %burst.wr.body

ST_37: tmp_12 (172)  [1/1] 0.00ns  loc: src/example.cpp:139
burst.wr.body:4  %tmp_12 = zext i9 %indvar2 to i64

ST_37: buff_V_addr_1 (173)  [1/1] 0.00ns  loc: src/example.cpp:139
burst.wr.body:5  %buff_V_addr_1 = getelementptr [256 x i256]* %buff_V, i64 0, i64 %tmp_12

ST_37: buff_V_load (174)  [2/2] 1.96ns  loc: src/example.cpp:139
burst.wr.body:6  %buff_V_load = load i256* %buff_V_addr_1, align 8


 <State 38>: 1.96ns
ST_38: buff_V_load (174)  [1/2] 1.96ns  loc: src/example.cpp:139
burst.wr.body:6  %buff_V_load = load i256* %buff_V_addr_1, align 8


 <State 39>: 3.50ns
ST_39: empty_12 (168)  [1/1] 0.00ns
burst.wr.body:0  %empty_12 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 256, i64 0)

ST_39: burstwrite_rbegin (169)  [1/1] 0.00ns
burst.wr.body:1  %burstwrite_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([18 x i8]* @burstwrite_OC_region)

ST_39: StgValue_271 (170)  [1/1] 0.00ns
burst.wr.body:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str12)

ST_39: StgValue_272 (171)  [1/1] 0.00ns
burst.wr.body:3  call void (...)* @_ssdm_op_SpecLoopName([23 x i8]* @memcpy_OC_a_OC_V_OC_s)

ST_39: StgValue_273 (175)  [1/1] 3.50ns  loc: src/example.cpp:139
burst.wr.body:7  call void @_ssdm_op_Write.m_axi.i256P(i256* %a_V_addr_2, i256 %buff_V_load, i32 -1)

ST_39: burstwrite_rend (176)  [1/1] 0.00ns
burst.wr.body:8  %burstwrite_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([18 x i8]* @burstwrite_OC_region, i32 %burstwrite_rbegin)

ST_39: StgValue_275 (177)  [1/1] 0.00ns
burst.wr.body:9  br label %burst.wr.header


 <State 40>: 3.50ns
ST_40: a_V_addr_2_wr_resp (179)  [5/5] 3.50ns  loc: src/example.cpp:139
memcpy.tail:0  %a_V_addr_2_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i256P(i256* %a_V_addr_2)

ST_40: curr_addr_a_1 (180)  [1/1] 1.60ns  loc: src/example.cpp:140
memcpy.tail:1  %curr_addr_a_1 = add nsw i32 %curr_addr_a, 256

ST_40: curr_addr_b_1 (181)  [1/1] 1.60ns  loc: src/example.cpp:141
memcpy.tail:2  %curr_addr_b_1 = add nsw i32 %curr_addr_b, 256

ST_40: curr_addr_c_1 (182)  [1/1] 1.60ns  loc: src/example.cpp:142
memcpy.tail:3  %curr_addr_c_1 = add nsw i32 %curr_addr_c, 256


 <State 41>: 3.50ns
ST_41: a_V_addr_2_wr_resp (179)  [4/5] 3.50ns  loc: src/example.cpp:139
memcpy.tail:0  %a_V_addr_2_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i256P(i256* %a_V_addr_2)


 <State 42>: 3.50ns
ST_42: a_V_addr_2_wr_resp (179)  [3/5] 3.50ns  loc: src/example.cpp:139
memcpy.tail:0  %a_V_addr_2_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i256P(i256* %a_V_addr_2)


 <State 43>: 3.50ns
ST_43: a_V_addr_2_wr_resp (179)  [2/5] 3.50ns  loc: src/example.cpp:139
memcpy.tail:0  %a_V_addr_2_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i256P(i256* %a_V_addr_2)


 <State 44>: 3.50ns
ST_44: a_V_addr_2_wr_resp (179)  [1/5] 3.50ns  loc: src/example.cpp:139
memcpy.tail:0  %a_V_addr_2_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i256P(i256* %a_V_addr_2)

ST_44: StgValue_284 (183)  [1/1] 0.00ns  loc: src/example.cpp:119
memcpy.tail:4  br label %0



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 4ns, clock uncertainty: 0.5ns.

 <State 1>: 1.34ns
The critical path consists of the following:
	wire read on port 'n_V' [15]  (0 ns)
	'icmp' operation ('i_op', src/example.cpp:116) [28]  (1.34 ns)

 <State 2>: 2.54ns
The critical path consists of the following:
	'add' operation ('segment.V', src/example.cpp:116) [30]  (1.24 ns)
	'add' operation ('r.V', src/example.cpp:120) [31]  (1.3 ns)

 <State 3>: 2.04ns
The critical path consists of the following:
	'phi' operation ('s') with incoming values : ('s', src/example.cpp:119) [34]  (0 ns)
	'icmp' operation ('tmp_9', src/example.cpp:120) [43]  (1.33 ns)
	'select' operation ('segment_len.V', src/example.cpp:120) [44]  (0.71 ns)

 <State 4>: 3.5ns
The critical path consists of the following:
	'getelementptr' operation ('a_V_addr', src/example.cpp:124) [46]  (0 ns)
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 5>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 6>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 7>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 8>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 9>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 10>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:124) [48]  (3.5 ns)

 <State 11>: 1.33ns
The critical path consists of the following:
	'phi' operation ('indvar') with incoming values : ('indvar_next') [51]  (0 ns)
	'icmp' operation ('exitcond3', src/example.cpp:120) [52]  (1.33 ns)

 <State 12>: 3.5ns
The critical path consists of the following:
	bus read on port 'a_V' (src/example.cpp:124) [60]  (3.5 ns)

 <State 13>: 1.96ns
The critical path consists of the following:
	'getelementptr' operation ('buff_a_addr', src/example.cpp:124) [62]  (0 ns)
	'store' operation (src/example.cpp:124) of variable 'a_V_addr_read', src/example.cpp:124 on array 'buff_a' [63]  (1.96 ns)

 <State 14>: 3.5ns
The critical path consists of the following:
	'getelementptr' operation ('a_V_addr_1', src/example.cpp:125) [68]  (0 ns)
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 15>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 16>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 17>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 18>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 19>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 20>: 3.5ns
The critical path consists of the following:
	bus request on port 'a_V' (src/example.cpp:125) [69]  (3.5 ns)

 <State 21>: 1.33ns
The critical path consists of the following:
	'phi' operation ('indvar1') with incoming values : ('indvar_next1') [72]  (0 ns)
	'icmp' operation ('exitcond', src/example.cpp:120) [73]  (1.33 ns)

 <State 22>: 3.5ns
The critical path consists of the following:
	bus read on port 'a_V' (src/example.cpp:125) [81]  (3.5 ns)

 <State 23>: 1.96ns
The critical path consists of the following:
	'getelementptr' operation ('buff_b_addr', src/example.cpp:125) [83]  (0 ns)
	'store' operation (src/example.cpp:125) of variable 'a_V_addr_1_read', src/example.cpp:125 on array 'buff_b' [84]  (1.96 ns)

 <State 24>: 0.892ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', src/example.cpp:127) [90]  (0.892 ns)

 <State 25>: 2.04ns
The critical path consists of the following:
	'icmp' operation ('exitcond2', src/example.cpp:127) [91]  (1.33 ns)
	blocking operation 0.71 ns on control path)

 <State 26>: 1.96ns
The critical path consists of the following:
	'load' operation ('buff_a_load', src/example.cpp:130) on array 'buff_a' [102]  (1.96 ns)

 <State 27>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 28>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 29>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 30>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 31>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 32>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 33>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 34>: 3.45ns
The critical path consists of the following:
	'fadd' operation ('tmp_11', src/example.cpp:132) [108]  (3.45 ns)

 <State 35>: 1.96ns
The critical path consists of the following:
	'store' operation (src/example.cpp:135) of variable '__Result__', src/example.cpp:135 on array 'buff.V', src/example.cpp:111 [154]  (1.96 ns)

 <State 36>: 3.5ns
The critical path consists of the following:
	'getelementptr' operation ('a_V_addr_2', src/example.cpp:139) [159]  (0 ns)
	bus request on port 'a_V' (src/example.cpp:139) [160]  (3.5 ns)

 <State 37>: 2.04ns
The critical path consists of the following:
	'icmp' operation ('exitcond4', src/example.cpp:120) [164]  (1.33 ns)
	blocking operation 0.71 ns on control path)

 <State 38>: 1.96ns
The critical path consists of the following:
	'load' operation ('buff_V_load', src/example.cpp:139) on array 'buff.V', src/example.cpp:111 [174]  (1.96 ns)

 <State 39>: 3.5ns
The critical path consists of the following:
	bus write on port 'a_V' (src/example.cpp:139) [175]  (3.5 ns)

 <State 40>: 3.5ns
The critical path consists of the following:
	bus access on port 'a_V' (src/example.cpp:139) [179]  (3.5 ns)

 <State 41>: 3.5ns
The critical path consists of the following:
	bus access on port 'a_V' (src/example.cpp:139) [179]  (3.5 ns)

 <State 42>: 3.5ns
The critical path consists of the following:
	bus access on port 'a_V' (src/example.cpp:139) [179]  (3.5 ns)

 <State 43>: 3.5ns
The critical path consists of the following:
	bus access on port 'a_V' (src/example.cpp:139) [179]  (3.5 ns)

 <State 44>: 3.5ns
The critical path consists of the following:
	bus access on port 'a_V' (src/example.cpp:139) [179]  (3.5 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
