// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "example.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic example::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic example::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<28> example::ap_ST_fsm_state1 = "1";
const sc_lv<28> example::ap_ST_fsm_state2 = "10";
const sc_lv<28> example::ap_ST_fsm_state3 = "100";
const sc_lv<28> example::ap_ST_fsm_state4 = "1000";
const sc_lv<28> example::ap_ST_fsm_state5 = "10000";
const sc_lv<28> example::ap_ST_fsm_state6 = "100000";
const sc_lv<28> example::ap_ST_fsm_state7 = "1000000";
const sc_lv<28> example::ap_ST_fsm_state8 = "10000000";
const sc_lv<28> example::ap_ST_fsm_state9 = "100000000";
const sc_lv<28> example::ap_ST_fsm_state10 = "1000000000";
const sc_lv<28> example::ap_ST_fsm_pp0_stage0 = "10000000000";
const sc_lv<28> example::ap_ST_fsm_state14 = "100000000000";
const sc_lv<28> example::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<28> example::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<28> example::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<28> example::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<28> example::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<28> example::ap_ST_fsm_state20 = "100000000000000000";
const sc_lv<28> example::ap_ST_fsm_pp1_stage0 = "1000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state24 = "10000000000000000000";
const sc_lv<28> example::ap_ST_fsm_pp2_stage0 = "100000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state36 = "1000000000000000000000";
const sc_lv<28> example::ap_ST_fsm_pp3_stage0 = "10000000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state40 = "100000000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state41 = "1000000000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state42 = "10000000000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state43 = "100000000000000000000000000";
const sc_lv<28> example::ap_ST_fsm_state44 = "1000000000000000000000000000";
const sc_lv<32> example::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> example::ap_const_lv1_1 = "1";
const bool example::ap_const_boolean_1 = true;
const sc_lv<16> example::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> example::ap_const_lv32_3 = "11";
const sc_lv<32> example::ap_const_lv32_A = "1010";
const sc_lv<1> example::ap_const_lv1_0 = "0";
const sc_lv<32> example::ap_const_lv32_B = "1011";
const sc_lv<32> example::ap_const_lv32_12 = "10010";
const sc_lv<32> example::ap_const_lv32_15 = "10101";
const sc_lv<32> example::ap_const_lv32_1B = "11011";
const int example::C_M_AXI_DATA_WIDTH = "100000";
const int example::C_M_AXI_A_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int example::C_M_AXI_A_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int example::C_M_AXI_A_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int example::C_M_AXI_A_V_CACHE_VALUE = "11";
const sc_lv<32> example::ap_const_lv32_1 = "1";
const sc_lv<32> example::ap_const_lv32_2 = "10";
const sc_lv<32> example::ap_const_lv32_14 = "10100";
const sc_lv<32> example::ap_const_lv32_16 = "10110";
const sc_lv<32> example::ap_const_lv32_17 = "10111";
const sc_lv<32> example::ap_const_lv32_9 = "1001";
const sc_lv<32> example::ap_const_lv32_11 = "10001";
const sc_lv<32> example::ap_const_lv32_13 = "10011";
const sc_lv<9> example::ap_const_lv9_0 = "000000000";
const sc_lv<3> example::ap_const_lv3_0 = "000";
const sc_lv<2> example::ap_const_lv2_0 = "00";
const sc_lv<4> example::ap_const_lv4_0 = "0000";
const sc_lv<32> example::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> example::ap_const_lv32_8 = "1000";
const sc_lv<32> example::ap_const_lv32_F = "1111";
const sc_lv<8> example::ap_const_lv8_0 = "00000000";
const sc_lv<9> example::ap_const_lv9_1FF = "111111111";
const sc_lv<9> example::ap_const_lv9_1 = "1";
const sc_lv<9> example::ap_const_lv9_100 = "100000000";
const sc_lv<32> example::ap_const_lv32_20 = "100000";
const sc_lv<32> example::ap_const_lv32_3F = "111111";
const sc_lv<32> example::ap_const_lv32_40 = "1000000";
const sc_lv<32> example::ap_const_lv32_5F = "1011111";
const sc_lv<32> example::ap_const_lv32_60 = "1100000";
const sc_lv<32> example::ap_const_lv32_7F = "1111111";
const sc_lv<32> example::ap_const_lv32_80 = "10000000";
const sc_lv<32> example::ap_const_lv32_9F = "10011111";
const sc_lv<32> example::ap_const_lv32_A0 = "10100000";
const sc_lv<32> example::ap_const_lv32_BF = "10111111";
const sc_lv<32> example::ap_const_lv32_C0 = "11000000";
const sc_lv<32> example::ap_const_lv32_DF = "11011111";
const sc_lv<32> example::ap_const_lv32_E0 = "11100000";
const sc_lv<32> example::ap_const_lv32_FF = "11111111";
const sc_lv<32> example::ap_const_lv32_100 = "100000000";

example::example(sc_module_name name) : sc_module(name), mVcdFile(0) {
    example_a_V_m_axi_U = new example_a_V_m_axi<256,64,5,16,16,16,16,C_M_AXI_A_V_ID_WIDTH,C_M_AXI_A_V_ADDR_WIDTH,C_M_AXI_A_V_DATA_WIDTH,C_M_AXI_A_V_AWUSER_WIDTH,C_M_AXI_A_V_ARUSER_WIDTH,C_M_AXI_A_V_WUSER_WIDTH,C_M_AXI_A_V_RUSER_WIDTH,C_M_AXI_A_V_BUSER_WIDTH,C_M_AXI_A_V_TARGET_ADDR,C_M_AXI_A_V_USER_VALUE,C_M_AXI_A_V_PROT_VALUE,C_M_AXI_A_V_CACHE_VALUE>("example_a_V_m_axi_U");
    example_a_V_m_axi_U->AWVALID(m_axi_a_V_AWVALID);
    example_a_V_m_axi_U->AWREADY(m_axi_a_V_AWREADY);
    example_a_V_m_axi_U->AWADDR(m_axi_a_V_AWADDR);
    example_a_V_m_axi_U->AWID(m_axi_a_V_AWID);
    example_a_V_m_axi_U->AWLEN(m_axi_a_V_AWLEN);
    example_a_V_m_axi_U->AWSIZE(m_axi_a_V_AWSIZE);
    example_a_V_m_axi_U->AWBURST(m_axi_a_V_AWBURST);
    example_a_V_m_axi_U->AWLOCK(m_axi_a_V_AWLOCK);
    example_a_V_m_axi_U->AWCACHE(m_axi_a_V_AWCACHE);
    example_a_V_m_axi_U->AWPROT(m_axi_a_V_AWPROT);
    example_a_V_m_axi_U->AWQOS(m_axi_a_V_AWQOS);
    example_a_V_m_axi_U->AWREGION(m_axi_a_V_AWREGION);
    example_a_V_m_axi_U->AWUSER(m_axi_a_V_AWUSER);
    example_a_V_m_axi_U->WVALID(m_axi_a_V_WVALID);
    example_a_V_m_axi_U->WREADY(m_axi_a_V_WREADY);
    example_a_V_m_axi_U->WDATA(m_axi_a_V_WDATA);
    example_a_V_m_axi_U->WSTRB(m_axi_a_V_WSTRB);
    example_a_V_m_axi_U->WLAST(m_axi_a_V_WLAST);
    example_a_V_m_axi_U->WID(m_axi_a_V_WID);
    example_a_V_m_axi_U->WUSER(m_axi_a_V_WUSER);
    example_a_V_m_axi_U->ARVALID(m_axi_a_V_ARVALID);
    example_a_V_m_axi_U->ARREADY(m_axi_a_V_ARREADY);
    example_a_V_m_axi_U->ARADDR(m_axi_a_V_ARADDR);
    example_a_V_m_axi_U->ARID(m_axi_a_V_ARID);
    example_a_V_m_axi_U->ARLEN(m_axi_a_V_ARLEN);
    example_a_V_m_axi_U->ARSIZE(m_axi_a_V_ARSIZE);
    example_a_V_m_axi_U->ARBURST(m_axi_a_V_ARBURST);
    example_a_V_m_axi_U->ARLOCK(m_axi_a_V_ARLOCK);
    example_a_V_m_axi_U->ARCACHE(m_axi_a_V_ARCACHE);
    example_a_V_m_axi_U->ARPROT(m_axi_a_V_ARPROT);
    example_a_V_m_axi_U->ARQOS(m_axi_a_V_ARQOS);
    example_a_V_m_axi_U->ARREGION(m_axi_a_V_ARREGION);
    example_a_V_m_axi_U->ARUSER(m_axi_a_V_ARUSER);
    example_a_V_m_axi_U->RVALID(m_axi_a_V_RVALID);
    example_a_V_m_axi_U->RREADY(m_axi_a_V_RREADY);
    example_a_V_m_axi_U->RDATA(m_axi_a_V_RDATA);
    example_a_V_m_axi_U->RLAST(m_axi_a_V_RLAST);
    example_a_V_m_axi_U->RID(m_axi_a_V_RID);
    example_a_V_m_axi_U->RUSER(m_axi_a_V_RUSER);
    example_a_V_m_axi_U->RRESP(m_axi_a_V_RRESP);
    example_a_V_m_axi_U->BVALID(m_axi_a_V_BVALID);
    example_a_V_m_axi_U->BREADY(m_axi_a_V_BREADY);
    example_a_V_m_axi_U->BRESP(m_axi_a_V_BRESP);
    example_a_V_m_axi_U->BID(m_axi_a_V_BID);
    example_a_V_m_axi_U->BUSER(m_axi_a_V_BUSER);
    example_a_V_m_axi_U->ACLK(ap_clk);
    example_a_V_m_axi_U->ARESET(ap_rst_n_inv);
    example_a_V_m_axi_U->ACLK_EN(ap_var_for_const0);
    example_a_V_m_axi_U->I_ARVALID(a_V_ARVALID);
    example_a_V_m_axi_U->I_ARREADY(a_V_ARREADY);
    example_a_V_m_axi_U->I_ARADDR(a_V_ARADDR);
    example_a_V_m_axi_U->I_ARID(ap_var_for_const1);
    example_a_V_m_axi_U->I_ARLEN(a_V_ARLEN);
    example_a_V_m_axi_U->I_ARSIZE(ap_var_for_const2);
    example_a_V_m_axi_U->I_ARLOCK(ap_var_for_const3);
    example_a_V_m_axi_U->I_ARCACHE(ap_var_for_const4);
    example_a_V_m_axi_U->I_ARQOS(ap_var_for_const4);
    example_a_V_m_axi_U->I_ARPROT(ap_var_for_const2);
    example_a_V_m_axi_U->I_ARUSER(ap_var_for_const1);
    example_a_V_m_axi_U->I_ARBURST(ap_var_for_const3);
    example_a_V_m_axi_U->I_ARREGION(ap_var_for_const4);
    example_a_V_m_axi_U->I_RVALID(a_V_RVALID);
    example_a_V_m_axi_U->I_RREADY(a_V_RREADY);
    example_a_V_m_axi_U->I_RDATA(a_V_RDATA);
    example_a_V_m_axi_U->I_RID(a_V_RID);
    example_a_V_m_axi_U->I_RUSER(a_V_RUSER);
    example_a_V_m_axi_U->I_RRESP(a_V_RRESP);
    example_a_V_m_axi_U->I_RLAST(a_V_RLAST);
    example_a_V_m_axi_U->I_AWVALID(a_V_AWVALID);
    example_a_V_m_axi_U->I_AWREADY(a_V_AWREADY);
    example_a_V_m_axi_U->I_AWADDR(tmp_7_fu_759_p1);
    example_a_V_m_axi_U->I_AWID(ap_var_for_const1);
    example_a_V_m_axi_U->I_AWLEN(tmp_3_add_i32_shr_reg_872);
    example_a_V_m_axi_U->I_AWSIZE(ap_var_for_const2);
    example_a_V_m_axi_U->I_AWLOCK(ap_var_for_const3);
    example_a_V_m_axi_U->I_AWCACHE(ap_var_for_const4);
    example_a_V_m_axi_U->I_AWQOS(ap_var_for_const4);
    example_a_V_m_axi_U->I_AWPROT(ap_var_for_const2);
    example_a_V_m_axi_U->I_AWUSER(ap_var_for_const1);
    example_a_V_m_axi_U->I_AWBURST(ap_var_for_const3);
    example_a_V_m_axi_U->I_AWREGION(ap_var_for_const4);
    example_a_V_m_axi_U->I_WVALID(a_V_WVALID);
    example_a_V_m_axi_U->I_WREADY(a_V_WREADY);
    example_a_V_m_axi_U->I_WDATA(buff_V_load_reg_1144);
    example_a_V_m_axi_U->I_WID(ap_var_for_const1);
    example_a_V_m_axi_U->I_WUSER(ap_var_for_const1);
    example_a_V_m_axi_U->I_WLAST(ap_var_for_const5);
    example_a_V_m_axi_U->I_WSTRB(ap_var_for_const6);
    example_a_V_m_axi_U->I_BVALID(a_V_BVALID);
    example_a_V_m_axi_U->I_BREADY(a_V_BREADY);
    example_a_V_m_axi_U->I_BRESP(a_V_BRESP);
    example_a_V_m_axi_U->I_BID(a_V_BID);
    example_a_V_m_axi_U->I_BUSER(a_V_BUSER);
    buff_a_U = new example_buff_a("buff_a_U");
    buff_a_U->clk(ap_clk);
    buff_a_U->reset(ap_rst_n_inv);
    buff_a_U->address0(buff_a_address0);
    buff_a_U->ce0(buff_a_ce0);
    buff_a_U->we0(buff_a_we0);
    buff_a_U->d0(reg_357);
    buff_a_U->q0(buff_a_q0);
    buff_b_U = new example_buff_a("buff_b_U");
    buff_b_U->clk(ap_clk);
    buff_b_U->reset(ap_rst_n_inv);
    buff_b_U->address0(buff_b_address0);
    buff_b_U->ce0(buff_b_ce0);
    buff_b_U->we0(buff_b_we0);
    buff_b_U->d0(reg_357);
    buff_b_U->q0(buff_b_q0);
    buff_V_U = new example_buff_a("buff_V_U");
    buff_V_U->clk(ap_clk);
    buff_V_U->reset(ap_rst_n_inv);
    buff_V_U->address0(buff_V_address0);
    buff_V_U->ce0(buff_V_ce0);
    buff_V_U->we0(buff_V_we0);
    buff_V_U->d0(buff_V_d0);
    buff_V_U->q0(buff_V_q0);
    example_fadd_32nsbkb_U1 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U1");
    example_fadd_32nsbkb_U1->clk(ap_clk);
    example_fadd_32nsbkb_U1->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U1->din0(grp_fu_325_p0);
    example_fadd_32nsbkb_U1->din1(grp_fu_325_p1);
    example_fadd_32nsbkb_U1->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U1->dout(grp_fu_325_p2);
    example_fadd_32nsbkb_U2 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U2");
    example_fadd_32nsbkb_U2->clk(ap_clk);
    example_fadd_32nsbkb_U2->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U2->din0(grp_fu_329_p0);
    example_fadd_32nsbkb_U2->din1(grp_fu_329_p1);
    example_fadd_32nsbkb_U2->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U2->dout(grp_fu_329_p2);
    example_fadd_32nsbkb_U3 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U3");
    example_fadd_32nsbkb_U3->clk(ap_clk);
    example_fadd_32nsbkb_U3->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U3->din0(grp_fu_333_p0);
    example_fadd_32nsbkb_U3->din1(grp_fu_333_p1);
    example_fadd_32nsbkb_U3->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U3->dout(grp_fu_333_p2);
    example_fadd_32nsbkb_U4 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U4");
    example_fadd_32nsbkb_U4->clk(ap_clk);
    example_fadd_32nsbkb_U4->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U4->din0(grp_fu_337_p0);
    example_fadd_32nsbkb_U4->din1(grp_fu_337_p1);
    example_fadd_32nsbkb_U4->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U4->dout(grp_fu_337_p2);
    example_fadd_32nsbkb_U5 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U5");
    example_fadd_32nsbkb_U5->clk(ap_clk);
    example_fadd_32nsbkb_U5->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U5->din0(grp_fu_341_p0);
    example_fadd_32nsbkb_U5->din1(grp_fu_341_p1);
    example_fadd_32nsbkb_U5->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U5->dout(grp_fu_341_p2);
    example_fadd_32nsbkb_U6 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U6");
    example_fadd_32nsbkb_U6->clk(ap_clk);
    example_fadd_32nsbkb_U6->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U6->din0(grp_fu_345_p0);
    example_fadd_32nsbkb_U6->din1(grp_fu_345_p1);
    example_fadd_32nsbkb_U6->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U6->dout(grp_fu_345_p2);
    example_fadd_32nsbkb_U7 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U7");
    example_fadd_32nsbkb_U7->clk(ap_clk);
    example_fadd_32nsbkb_U7->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U7->din0(grp_fu_349_p0);
    example_fadd_32nsbkb_U7->din1(grp_fu_349_p1);
    example_fadd_32nsbkb_U7->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U7->dout(grp_fu_349_p2);
    example_fadd_32nsbkb_U8 = new example_fadd_32nsbkb<1,8,32,32,32>("example_fadd_32nsbkb_U8");
    example_fadd_32nsbkb_U8->clk(ap_clk);
    example_fadd_32nsbkb_U8->reset(ap_rst_n_inv);
    example_fadd_32nsbkb_U8->din0(grp_fu_353_p0);
    example_fadd_32nsbkb_U8->din1(grp_fu_353_p1);
    example_fadd_32nsbkb_U8->ce(ap_var_for_const0);
    example_fadd_32nsbkb_U8->dout(grp_fu_353_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_ARADDR);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_s_fu_427_p1 );
    sensitive << ( tmp_5_fu_458_p1 );
    sensitive << ( ap_reg_ioackin_a_V_ARREADY );

    SC_METHOD(thread_a_V_ARLEN);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_3_add_i32_shr_fu_438_p1 );
    sensitive << ( tmp_3_add_i32_shr_reg_872 );
    sensitive << ( ap_reg_ioackin_a_V_ARREADY );

    SC_METHOD(thread_a_V_ARVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_reg_ioackin_a_V_ARREADY );

    SC_METHOD(thread_a_V_AWVALID);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_reg_ioackin_a_V_AWREADY );

    SC_METHOD(thread_a_V_BREADY);
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( a_V_BVALID );

    SC_METHOD(thread_a_V_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );
    sensitive << ( a_V_RVALID );

    SC_METHOD(thread_a_V_WVALID);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 );
    sensitive << ( ap_reg_ioackin_a_V_WREADY );

    SC_METHOD(thread_a_V_blk_n_AR);
    sensitive << ( m_axi_a_V_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_a_V_blk_n_AW);
    sensitive << ( m_axi_a_V_AWREADY );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_a_V_blk_n_B);
    sensitive << ( m_axi_a_V_BVALID );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_a_V_blk_n_R);
    sensitive << ( m_axi_a_V_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );

    SC_METHOD(thread_a_V_blk_n_W);
    sensitive << ( m_axi_a_V_WREADY );
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 );

    SC_METHOD(thread_a_addr_ap_vld_in_sig);
    sensitive << ( a_addr_ap_vld );
    sensitive << ( a_addr_ap_vld_preg );

    SC_METHOD(thread_a_addr_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_addr_ap_vld );

    SC_METHOD(thread_a_addr_in_sig);
    sensitive << ( a_addr );
    sensitive << ( a_addr_preg );
    sensitive << ( a_addr_ap_vld );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp3_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_320);
    sensitive << ( ap_start );
    sensitive << ( n_V_ap_vld_in_sig );
    sensitive << ( a_addr_ap_vld_in_sig );
    sensitive << ( b_addr_ap_vld_in_sig );
    sensitive << ( c_addr_ap_vld_in_sig );

    SC_METHOD(thread_ap_condition_643);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 );
    sensitive << ( ap_sig_ioackin_a_V_WREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_404_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_404_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_a_V_ARREADY);
    sensitive << ( a_V_ARREADY );
    sensitive << ( ap_reg_ioackin_a_V_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_a_V_AWREADY);
    sensitive << ( a_V_AWREADY );
    sensitive << ( ap_reg_ioackin_a_V_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_a_V_WREADY);
    sensitive << ( a_V_WREADY );
    sensitive << ( ap_reg_ioackin_a_V_WREADY );

    SC_METHOD(thread_b_addr_ap_vld_in_sig);
    sensitive << ( b_addr_ap_vld );
    sensitive << ( b_addr_ap_vld_preg );

    SC_METHOD(thread_b_addr_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b_addr_ap_vld );

    SC_METHOD(thread_b_addr_in_sig);
    sensitive << ( b_addr );
    sensitive << ( b_addr_preg );
    sensitive << ( b_addr_ap_vld );

    SC_METHOD(thread_buff_V_address0);
    sensitive << ( ap_pipeline_reg_pp2_iter9_tmp_6_reg_910 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter10 );
    sensitive << ( tmp_12_fu_781_p1 );

    SC_METHOD(thread_buff_V_ce0);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_sig_ioackin_a_V_WREADY );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter10 );

    SC_METHOD(thread_buff_V_d0);
    sensitive << ( ap_enable_reg_pp2_iter10 );
    sensitive << ( p_Repl2_7_fu_735_p1 );
    sensitive << ( p_Repl2_6_fu_732_p1 );
    sensitive << ( p_Repl2_5_fu_729_p1 );
    sensitive << ( p_Repl2_4_fu_726_p1 );
    sensitive << ( p_Repl2_3_fu_723_p1 );
    sensitive << ( p_Repl2_2_fu_720_p1 );
    sensitive << ( p_Repl2_1_fu_717_p1 );
    sensitive << ( p_Repl2_s_fu_714_p1 );

    SC_METHOD(thread_buff_V_we0);
    sensitive << ( ap_pipeline_reg_pp2_iter9_exitcond2_reg_901 );
    sensitive << ( ap_enable_reg_pp2_iter10 );

    SC_METHOD(thread_buff_a_address0);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( tmp_6_fu_496_p1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_1_fu_453_p1 );

    SC_METHOD(thread_buff_a_ce0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( a_V_RVALID );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_buff_a_we0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( a_V_RVALID );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond3_reg_877 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_buff_b_address0);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( tmp_6_fu_496_p1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_4_fu_480_p1 );

    SC_METHOD(thread_buff_b_ce0);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );
    sensitive << ( a_V_RVALID );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_buff_b_we0);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );
    sensitive << ( a_V_RVALID );
    sensitive << ( ap_pipeline_reg_pp1_iter1_exitcond_reg_892 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_c_addr_ap_vld_in_sig);
    sensitive << ( c_addr_ap_vld );
    sensitive << ( c_addr_ap_vld_preg );

    SC_METHOD(thread_c_addr_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_addr_ap_vld );

    SC_METHOD(thread_c_addr_in_sig);
    sensitive << ( c_addr );
    sensitive << ( c_addr_preg );
    sensitive << ( c_addr_ap_vld );

    SC_METHOD(thread_curr_addr_a_1_fu_786_p2);
    sensitive << ( curr_addr_a_reg_249 );

    SC_METHOD(thread_curr_addr_b_1_fu_792_p2);
    sensitive << ( curr_addr_b_reg_259 );

    SC_METHOD(thread_curr_addr_c_1_fu_798_p2);
    sensitive << ( curr_addr_c_reg_269 );

    SC_METHOD(thread_exitcond1_fu_404_p2);
    sensitive << ( segment_V_reg_839 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( s_reg_238 );

    SC_METHOD(thread_exitcond2_fu_485_p2);
    sensitive << ( i_reg_303 );
    sensitive << ( segment_len_V_reg_857 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_exitcond3_fu_442_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( a_V_RVALID );
    sensitive << ( segment_len_V_reg_857 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_phi_fu_283_p4 );

    SC_METHOD(thread_exitcond4_fu_770_p2);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 );
    sensitive << ( indvar2_reg_314 );
    sensitive << ( segment_len_V_reg_857 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_sig_ioackin_a_V_WREADY );
    sensitive << ( ap_enable_reg_pp3_iter0 );

    SC_METHOD(thread_exitcond_fu_469_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );
    sensitive << ( a_V_RVALID );
    sensitive << ( segment_len_V_reg_857 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( indvar1_phi_fu_295_p4 );

    SC_METHOD(thread_grp_fu_325_p0);
    sensitive << ( tmp_3_reg_925 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_325_p1);
    sensitive << ( tmp_14_reg_930 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_329_p0);
    sensitive << ( p_Result_s_reg_935 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_329_p1);
    sensitive << ( p_Result_1_1_reg_940 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_333_p0);
    sensitive << ( p_Result_2_reg_945 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_333_p1);
    sensitive << ( p_Result_1_2_reg_950 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_337_p0);
    sensitive << ( p_Result_3_reg_955 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_337_p1);
    sensitive << ( p_Result_1_3_reg_960 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_341_p0);
    sensitive << ( p_Result_4_reg_965 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_341_p1);
    sensitive << ( p_Result_1_4_reg_970 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_345_p0);
    sensitive << ( p_Result_5_reg_975 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_345_p1);
    sensitive << ( p_Result_1_5_reg_980 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_349_p0);
    sensitive << ( p_Result_6_reg_985 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_349_p1);
    sensitive << ( p_Result_1_6_reg_990 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_353_p0);
    sensitive << ( p_Result_7_reg_995 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_grp_fu_353_p1);
    sensitive << ( p_Result_1_7_reg_1000 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_i_1_fu_490_p2);
    sensitive << ( i_reg_303 );

    SC_METHOD(thread_i_op_assign_fu_377_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_condition_320 );
    sensitive << ( r_V_fu_373_p1 );

    SC_METHOD(thread_indvar1_phi_fu_295_p4);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );
    sensitive << ( indvar1_reg_291 );
    sensitive << ( indvar_next1_reg_896 );

    SC_METHOD(thread_indvar_next1_fu_474_p2);
    sensitive << ( indvar1_phi_fu_295_p4 );

    SC_METHOD(thread_indvar_next2_fu_775_p2);
    sensitive << ( indvar2_reg_314 );

    SC_METHOD(thread_indvar_next_fu_447_p2);
    sensitive << ( indvar_phi_fu_283_p4 );

    SC_METHOD(thread_indvar_phi_fu_283_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( indvar_reg_279 );
    sensitive << ( indvar_next_reg_881 );

    SC_METHOD(thread_n_V_ap_vld_in_sig);
    sensitive << ( n_V_ap_vld );
    sensitive << ( n_V_ap_vld_preg );

    SC_METHOD(thread_n_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_V_ap_vld );

    SC_METHOD(thread_n_V_in_sig);
    sensitive << ( n_V );
    sensitive << ( n_V_preg );
    sensitive << ( n_V_ap_vld );

    SC_METHOD(thread_p_Repl2_1_fu_717_p1);
    sensitive << ( tmp_14_1_reg_1090 );

    SC_METHOD(thread_p_Repl2_2_fu_720_p1);
    sensitive << ( tmp_14_2_reg_1095 );

    SC_METHOD(thread_p_Repl2_3_fu_723_p1);
    sensitive << ( tmp_14_3_reg_1100 );

    SC_METHOD(thread_p_Repl2_4_fu_726_p1);
    sensitive << ( tmp_14_4_reg_1105 );

    SC_METHOD(thread_p_Repl2_5_fu_729_p1);
    sensitive << ( tmp_14_5_reg_1110 );

    SC_METHOD(thread_p_Repl2_6_fu_732_p1);
    sensitive << ( tmp_14_6_reg_1115 );

    SC_METHOD(thread_p_Repl2_7_fu_735_p1);
    sensitive << ( tmp_14_7_reg_1120 );

    SC_METHOD(thread_p_Repl2_s_fu_714_p1);
    sensitive << ( tmp_11_reg_1085 );

    SC_METHOD(thread_r_V_1_fu_398_p2);
    sensitive << ( segment_V_fu_392_p2 );

    SC_METHOD(thread_r_V_cast_fu_386_p1);
    sensitive << ( r_V_reg_824 );

    SC_METHOD(thread_r_V_fu_373_p1);
    sensitive << ( n_V_in_sig );

    SC_METHOD(thread_s_1_fu_409_p2);
    sensitive << ( s_reg_238 );

    SC_METHOD(thread_segment_V_fu_392_p2);
    sensitive << ( tmp_2_cast_fu_389_p1 );
    sensitive << ( tmp_cast_fu_383_p1 );

    SC_METHOD(thread_segment_len_V_fu_420_p3);
    sensitive << ( r_V_cast_reg_834 );
    sensitive << ( tmp_9_fu_415_p2 );

    SC_METHOD(thread_tmp_12_fu_781_p1);
    sensitive << ( indvar2_reg_314 );

    SC_METHOD(thread_tmp_14_fu_506_p1);
    sensitive << ( buff_b_q0 );

    SC_METHOD(thread_tmp_1_fu_453_p1);
    sensitive << ( ap_pipeline_reg_pp0_iter1_indvar_reg_279 );

    SC_METHOD(thread_tmp_2_cast_fu_389_p1);
    sensitive << ( i_op_assign_reg_829 );

    SC_METHOD(thread_tmp_3_add_i32_shr_fu_438_p1);
    sensitive << ( segment_len_V_reg_857 );

    SC_METHOD(thread_tmp_3_fu_502_p1);
    sensitive << ( buff_a_q0 );

    SC_METHOD(thread_tmp_4_fu_480_p1);
    sensitive << ( ap_pipeline_reg_pp1_iter1_indvar1_reg_291 );

    SC_METHOD(thread_tmp_5_fu_458_p1);
    sensitive << ( curr_addr_b_reg_259 );

    SC_METHOD(thread_tmp_6_fu_496_p1);
    sensitive << ( i_reg_303 );

    SC_METHOD(thread_tmp_7_fu_759_p1);
    sensitive << ( curr_addr_c_reg_269 );

    SC_METHOD(thread_tmp_9_fu_415_p2);
    sensitive << ( r_V_1_reg_844 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_404_p2 );
    sensitive << ( s_reg_238 );

    SC_METHOD(thread_tmp_cast_fu_383_p1);
    sensitive << ( tmp_reg_819 );

    SC_METHOD(thread_tmp_s_fu_427_p1);
    sensitive << ( curr_addr_a_reg_249 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond3_reg_877 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_reg_892 );
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 );
    sensitive << ( a_V_RVALID );
    sensitive << ( a_V_BVALID );
    sensitive << ( ap_condition_320 );
    sensitive << ( exitcond1_fu_404_p2 );
    sensitive << ( ap_sig_ioackin_a_V_ARREADY );
    sensitive << ( exitcond3_fu_442_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_469_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond2_fu_485_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_sig_ioackin_a_V_AWREADY );
    sensitive << ( exitcond4_fu_770_p2 );
    sensitive << ( ap_sig_ioackin_a_V_WREADY );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp3_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter9 );
    sensitive << ( ap_enable_reg_pp2_iter10 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "0000000000000000000000000001";
    n_V_preg = "0000000000000000";
    n_V_ap_vld_preg = SC_LOGIC_0;
    a_addr_preg = "00000000000000000000000000000000";
    a_addr_ap_vld_preg = SC_LOGIC_0;
    b_addr_preg = "00000000000000000000000000000000";
    b_addr_ap_vld_preg = SC_LOGIC_0;
    c_addr_preg = "00000000000000000000000000000000";
    c_addr_ap_vld_preg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter10 = SC_LOGIC_0;
    ap_reg_ioackin_a_V_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_a_V_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_a_V_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_a_V_AWVALID, "(port)m_axi_a_V_AWVALID");
    sc_trace(mVcdFile, m_axi_a_V_AWREADY, "(port)m_axi_a_V_AWREADY");
    sc_trace(mVcdFile, m_axi_a_V_AWADDR, "(port)m_axi_a_V_AWADDR");
    sc_trace(mVcdFile, m_axi_a_V_AWID, "(port)m_axi_a_V_AWID");
    sc_trace(mVcdFile, m_axi_a_V_AWLEN, "(port)m_axi_a_V_AWLEN");
    sc_trace(mVcdFile, m_axi_a_V_AWSIZE, "(port)m_axi_a_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_a_V_AWBURST, "(port)m_axi_a_V_AWBURST");
    sc_trace(mVcdFile, m_axi_a_V_AWLOCK, "(port)m_axi_a_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_a_V_AWCACHE, "(port)m_axi_a_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_a_V_AWPROT, "(port)m_axi_a_V_AWPROT");
    sc_trace(mVcdFile, m_axi_a_V_AWQOS, "(port)m_axi_a_V_AWQOS");
    sc_trace(mVcdFile, m_axi_a_V_AWREGION, "(port)m_axi_a_V_AWREGION");
    sc_trace(mVcdFile, m_axi_a_V_AWUSER, "(port)m_axi_a_V_AWUSER");
    sc_trace(mVcdFile, m_axi_a_V_WVALID, "(port)m_axi_a_V_WVALID");
    sc_trace(mVcdFile, m_axi_a_V_WREADY, "(port)m_axi_a_V_WREADY");
    sc_trace(mVcdFile, m_axi_a_V_WDATA, "(port)m_axi_a_V_WDATA");
    sc_trace(mVcdFile, m_axi_a_V_WSTRB, "(port)m_axi_a_V_WSTRB");
    sc_trace(mVcdFile, m_axi_a_V_WLAST, "(port)m_axi_a_V_WLAST");
    sc_trace(mVcdFile, m_axi_a_V_WID, "(port)m_axi_a_V_WID");
    sc_trace(mVcdFile, m_axi_a_V_WUSER, "(port)m_axi_a_V_WUSER");
    sc_trace(mVcdFile, m_axi_a_V_ARVALID, "(port)m_axi_a_V_ARVALID");
    sc_trace(mVcdFile, m_axi_a_V_ARREADY, "(port)m_axi_a_V_ARREADY");
    sc_trace(mVcdFile, m_axi_a_V_ARADDR, "(port)m_axi_a_V_ARADDR");
    sc_trace(mVcdFile, m_axi_a_V_ARID, "(port)m_axi_a_V_ARID");
    sc_trace(mVcdFile, m_axi_a_V_ARLEN, "(port)m_axi_a_V_ARLEN");
    sc_trace(mVcdFile, m_axi_a_V_ARSIZE, "(port)m_axi_a_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_a_V_ARBURST, "(port)m_axi_a_V_ARBURST");
    sc_trace(mVcdFile, m_axi_a_V_ARLOCK, "(port)m_axi_a_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_a_V_ARCACHE, "(port)m_axi_a_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_a_V_ARPROT, "(port)m_axi_a_V_ARPROT");
    sc_trace(mVcdFile, m_axi_a_V_ARQOS, "(port)m_axi_a_V_ARQOS");
    sc_trace(mVcdFile, m_axi_a_V_ARREGION, "(port)m_axi_a_V_ARREGION");
    sc_trace(mVcdFile, m_axi_a_V_ARUSER, "(port)m_axi_a_V_ARUSER");
    sc_trace(mVcdFile, m_axi_a_V_RVALID, "(port)m_axi_a_V_RVALID");
    sc_trace(mVcdFile, m_axi_a_V_RREADY, "(port)m_axi_a_V_RREADY");
    sc_trace(mVcdFile, m_axi_a_V_RDATA, "(port)m_axi_a_V_RDATA");
    sc_trace(mVcdFile, m_axi_a_V_RLAST, "(port)m_axi_a_V_RLAST");
    sc_trace(mVcdFile, m_axi_a_V_RID, "(port)m_axi_a_V_RID");
    sc_trace(mVcdFile, m_axi_a_V_RUSER, "(port)m_axi_a_V_RUSER");
    sc_trace(mVcdFile, m_axi_a_V_RRESP, "(port)m_axi_a_V_RRESP");
    sc_trace(mVcdFile, m_axi_a_V_BVALID, "(port)m_axi_a_V_BVALID");
    sc_trace(mVcdFile, m_axi_a_V_BREADY, "(port)m_axi_a_V_BREADY");
    sc_trace(mVcdFile, m_axi_a_V_BRESP, "(port)m_axi_a_V_BRESP");
    sc_trace(mVcdFile, m_axi_a_V_BID, "(port)m_axi_a_V_BID");
    sc_trace(mVcdFile, m_axi_a_V_BUSER, "(port)m_axi_a_V_BUSER");
    sc_trace(mVcdFile, n_V, "(port)n_V");
    sc_trace(mVcdFile, n_V_ap_vld, "(port)n_V_ap_vld");
    sc_trace(mVcdFile, a_addr, "(port)a_addr");
    sc_trace(mVcdFile, a_addr_ap_vld, "(port)a_addr_ap_vld");
    sc_trace(mVcdFile, b_addr, "(port)b_addr");
    sc_trace(mVcdFile, b_addr_ap_vld, "(port)b_addr_ap_vld");
    sc_trace(mVcdFile, c_addr, "(port)c_addr");
    sc_trace(mVcdFile, c_addr_ap_vld, "(port)c_addr_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, n_V_preg, "n_V_preg");
    sc_trace(mVcdFile, n_V_in_sig, "n_V_in_sig");
    sc_trace(mVcdFile, n_V_ap_vld_preg, "n_V_ap_vld_preg");
    sc_trace(mVcdFile, n_V_ap_vld_in_sig, "n_V_ap_vld_in_sig");
    sc_trace(mVcdFile, a_addr_preg, "a_addr_preg");
    sc_trace(mVcdFile, a_addr_in_sig, "a_addr_in_sig");
    sc_trace(mVcdFile, a_addr_ap_vld_preg, "a_addr_ap_vld_preg");
    sc_trace(mVcdFile, a_addr_ap_vld_in_sig, "a_addr_ap_vld_in_sig");
    sc_trace(mVcdFile, b_addr_preg, "b_addr_preg");
    sc_trace(mVcdFile, b_addr_in_sig, "b_addr_in_sig");
    sc_trace(mVcdFile, b_addr_ap_vld_preg, "b_addr_ap_vld_preg");
    sc_trace(mVcdFile, b_addr_ap_vld_in_sig, "b_addr_ap_vld_in_sig");
    sc_trace(mVcdFile, c_addr_preg, "c_addr_preg");
    sc_trace(mVcdFile, c_addr_in_sig, "c_addr_in_sig");
    sc_trace(mVcdFile, c_addr_ap_vld_preg, "c_addr_ap_vld_preg");
    sc_trace(mVcdFile, c_addr_ap_vld_in_sig, "c_addr_ap_vld_in_sig");
    sc_trace(mVcdFile, a_V_blk_n_AR, "a_V_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, a_V_blk_n_R, "a_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond3_reg_877, "exitcond3_reg_877");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, exitcond_reg_892, "exitcond_reg_892");
    sc_trace(mVcdFile, a_V_blk_n_AW, "a_V_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, a_V_blk_n_W, "a_V_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter2, "ap_enable_reg_pp3_iter2");
    sc_trace(mVcdFile, exitcond4_reg_1130, "exitcond4_reg_1130");
    sc_trace(mVcdFile, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130, "ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130");
    sc_trace(mVcdFile, a_V_blk_n_B, "a_V_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, n_V_blk_n, "n_V_blk_n");
    sc_trace(mVcdFile, a_addr_blk_n, "a_addr_blk_n");
    sc_trace(mVcdFile, b_addr_blk_n, "b_addr_blk_n");
    sc_trace(mVcdFile, c_addr_blk_n, "c_addr_blk_n");
    sc_trace(mVcdFile, a_V_AWVALID, "a_V_AWVALID");
    sc_trace(mVcdFile, a_V_AWREADY, "a_V_AWREADY");
    sc_trace(mVcdFile, a_V_WVALID, "a_V_WVALID");
    sc_trace(mVcdFile, a_V_WREADY, "a_V_WREADY");
    sc_trace(mVcdFile, a_V_ARVALID, "a_V_ARVALID");
    sc_trace(mVcdFile, a_V_ARREADY, "a_V_ARREADY");
    sc_trace(mVcdFile, a_V_ARADDR, "a_V_ARADDR");
    sc_trace(mVcdFile, a_V_ARLEN, "a_V_ARLEN");
    sc_trace(mVcdFile, a_V_RVALID, "a_V_RVALID");
    sc_trace(mVcdFile, a_V_RREADY, "a_V_RREADY");
    sc_trace(mVcdFile, a_V_RDATA, "a_V_RDATA");
    sc_trace(mVcdFile, a_V_RLAST, "a_V_RLAST");
    sc_trace(mVcdFile, a_V_RID, "a_V_RID");
    sc_trace(mVcdFile, a_V_RUSER, "a_V_RUSER");
    sc_trace(mVcdFile, a_V_RRESP, "a_V_RRESP");
    sc_trace(mVcdFile, a_V_BVALID, "a_V_BVALID");
    sc_trace(mVcdFile, a_V_BREADY, "a_V_BREADY");
    sc_trace(mVcdFile, a_V_BRESP, "a_V_BRESP");
    sc_trace(mVcdFile, a_V_BID, "a_V_BID");
    sc_trace(mVcdFile, a_V_BUSER, "a_V_BUSER");
    sc_trace(mVcdFile, indvar_reg_279, "indvar_reg_279");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_indvar_reg_279, "ap_pipeline_reg_pp0_iter1_indvar_reg_279");
    sc_trace(mVcdFile, indvar1_reg_291, "indvar1_reg_291");
    sc_trace(mVcdFile, ap_pipeline_reg_pp1_iter1_indvar1_reg_291, "ap_pipeline_reg_pp1_iter1_indvar1_reg_291");
    sc_trace(mVcdFile, i_reg_303, "i_reg_303");
    sc_trace(mVcdFile, indvar2_reg_314, "indvar2_reg_314");
    sc_trace(mVcdFile, reg_357, "reg_357");
    sc_trace(mVcdFile, ap_condition_320, "ap_condition_320");
    sc_trace(mVcdFile, tmp_reg_819, "tmp_reg_819");
    sc_trace(mVcdFile, r_V_fu_373_p1, "r_V_fu_373_p1");
    sc_trace(mVcdFile, r_V_reg_824, "r_V_reg_824");
    sc_trace(mVcdFile, i_op_assign_fu_377_p2, "i_op_assign_fu_377_p2");
    sc_trace(mVcdFile, i_op_assign_reg_829, "i_op_assign_reg_829");
    sc_trace(mVcdFile, r_V_cast_fu_386_p1, "r_V_cast_fu_386_p1");
    sc_trace(mVcdFile, r_V_cast_reg_834, "r_V_cast_reg_834");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, segment_V_fu_392_p2, "segment_V_fu_392_p2");
    sc_trace(mVcdFile, segment_V_reg_839, "segment_V_reg_839");
    sc_trace(mVcdFile, r_V_1_fu_398_p2, "r_V_1_fu_398_p2");
    sc_trace(mVcdFile, r_V_1_reg_844, "r_V_1_reg_844");
    sc_trace(mVcdFile, s_1_fu_409_p2, "s_1_fu_409_p2");
    sc_trace(mVcdFile, s_1_reg_852, "s_1_reg_852");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, segment_len_V_fu_420_p3, "segment_len_V_fu_420_p3");
    sc_trace(mVcdFile, segment_len_V_reg_857, "segment_len_V_reg_857");
    sc_trace(mVcdFile, exitcond1_fu_404_p2, "exitcond1_fu_404_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_a_V_ARREADY, "ap_sig_ioackin_a_V_ARREADY");
    sc_trace(mVcdFile, tmp_3_add_i32_shr_fu_438_p1, "tmp_3_add_i32_shr_fu_438_p1");
    sc_trace(mVcdFile, tmp_3_add_i32_shr_reg_872, "tmp_3_add_i32_shr_reg_872");
    sc_trace(mVcdFile, exitcond3_fu_442_p2, "exitcond3_fu_442_p2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond3_reg_877, "ap_pipeline_reg_pp0_iter1_exitcond3_reg_877");
    sc_trace(mVcdFile, indvar_next_fu_447_p2, "indvar_next_fu_447_p2");
    sc_trace(mVcdFile, indvar_next_reg_881, "indvar_next_reg_881");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, exitcond_fu_469_p2, "exitcond_fu_469_p2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp1_iter1_exitcond_reg_892, "ap_pipeline_reg_pp1_iter1_exitcond_reg_892");
    sc_trace(mVcdFile, indvar_next1_fu_474_p2, "indvar_next1_fu_474_p2");
    sc_trace(mVcdFile, indvar_next1_reg_896, "indvar_next1_reg_896");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, exitcond2_fu_485_p2, "exitcond2_fu_485_p2");
    sc_trace(mVcdFile, exitcond2_reg_901, "exitcond2_reg_901");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter1_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter1_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter2_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter2_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter3_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter3_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter4_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter4_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter5_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter5_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter6_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter6_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter7_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter7_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter8_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter8_exitcond2_reg_901");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter9_exitcond2_reg_901, "ap_pipeline_reg_pp2_iter9_exitcond2_reg_901");
    sc_trace(mVcdFile, i_1_fu_490_p2, "i_1_fu_490_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, tmp_6_fu_496_p1, "tmp_6_fu_496_p1");
    sc_trace(mVcdFile, tmp_6_reg_910, "tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter1_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter1_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter2_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter2_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter3_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter3_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter4_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter4_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter5_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter5_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter6_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter6_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter7_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter7_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter8_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter8_tmp_6_reg_910");
    sc_trace(mVcdFile, ap_pipeline_reg_pp2_iter9_tmp_6_reg_910, "ap_pipeline_reg_pp2_iter9_tmp_6_reg_910");
    sc_trace(mVcdFile, tmp_3_fu_502_p1, "tmp_3_fu_502_p1");
    sc_trace(mVcdFile, tmp_3_reg_925, "tmp_3_reg_925");
    sc_trace(mVcdFile, tmp_14_fu_506_p1, "tmp_14_fu_506_p1");
    sc_trace(mVcdFile, tmp_14_reg_930, "tmp_14_reg_930");
    sc_trace(mVcdFile, p_Result_s_reg_935, "p_Result_s_reg_935");
    sc_trace(mVcdFile, p_Result_1_1_reg_940, "p_Result_1_1_reg_940");
    sc_trace(mVcdFile, p_Result_2_reg_945, "p_Result_2_reg_945");
    sc_trace(mVcdFile, p_Result_1_2_reg_950, "p_Result_1_2_reg_950");
    sc_trace(mVcdFile, p_Result_3_reg_955, "p_Result_3_reg_955");
    sc_trace(mVcdFile, p_Result_1_3_reg_960, "p_Result_1_3_reg_960");
    sc_trace(mVcdFile, p_Result_4_reg_965, "p_Result_4_reg_965");
    sc_trace(mVcdFile, p_Result_1_4_reg_970, "p_Result_1_4_reg_970");
    sc_trace(mVcdFile, p_Result_5_reg_975, "p_Result_5_reg_975");
    sc_trace(mVcdFile, p_Result_1_5_reg_980, "p_Result_1_5_reg_980");
    sc_trace(mVcdFile, p_Result_6_reg_985, "p_Result_6_reg_985");
    sc_trace(mVcdFile, p_Result_1_6_reg_990, "p_Result_1_6_reg_990");
    sc_trace(mVcdFile, p_Result_7_reg_995, "p_Result_7_reg_995");
    sc_trace(mVcdFile, p_Result_1_7_reg_1000, "p_Result_1_7_reg_1000");
    sc_trace(mVcdFile, grp_fu_325_p2, "grp_fu_325_p2");
    sc_trace(mVcdFile, tmp_11_reg_1085, "tmp_11_reg_1085");
    sc_trace(mVcdFile, grp_fu_329_p2, "grp_fu_329_p2");
    sc_trace(mVcdFile, tmp_14_1_reg_1090, "tmp_14_1_reg_1090");
    sc_trace(mVcdFile, grp_fu_333_p2, "grp_fu_333_p2");
    sc_trace(mVcdFile, tmp_14_2_reg_1095, "tmp_14_2_reg_1095");
    sc_trace(mVcdFile, grp_fu_337_p2, "grp_fu_337_p2");
    sc_trace(mVcdFile, tmp_14_3_reg_1100, "tmp_14_3_reg_1100");
    sc_trace(mVcdFile, grp_fu_341_p2, "grp_fu_341_p2");
    sc_trace(mVcdFile, tmp_14_4_reg_1105, "tmp_14_4_reg_1105");
    sc_trace(mVcdFile, grp_fu_345_p2, "grp_fu_345_p2");
    sc_trace(mVcdFile, tmp_14_5_reg_1110, "tmp_14_5_reg_1110");
    sc_trace(mVcdFile, grp_fu_349_p2, "grp_fu_349_p2");
    sc_trace(mVcdFile, tmp_14_6_reg_1115, "tmp_14_6_reg_1115");
    sc_trace(mVcdFile, grp_fu_353_p2, "grp_fu_353_p2");
    sc_trace(mVcdFile, tmp_14_7_reg_1120, "tmp_14_7_reg_1120");
    sc_trace(mVcdFile, ap_sig_ioackin_a_V_AWREADY, "ap_sig_ioackin_a_V_AWREADY");
    sc_trace(mVcdFile, exitcond4_fu_770_p2, "exitcond4_fu_770_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp3_stage0, "ap_CS_fsm_pp3_stage0");
    sc_trace(mVcdFile, ap_sig_ioackin_a_V_WREADY, "ap_sig_ioackin_a_V_WREADY");
    sc_trace(mVcdFile, indvar_next2_fu_775_p2, "indvar_next2_fu_775_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter0, "ap_enable_reg_pp3_iter0");
    sc_trace(mVcdFile, buff_V_q0, "buff_V_q0");
    sc_trace(mVcdFile, buff_V_load_reg_1144, "buff_V_load_reg_1144");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter1, "ap_enable_reg_pp3_iter1");
    sc_trace(mVcdFile, curr_addr_a_1_fu_786_p2, "curr_addr_a_1_fu_786_p2");
    sc_trace(mVcdFile, curr_addr_a_1_reg_1149, "curr_addr_a_1_reg_1149");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, curr_addr_b_1_fu_792_p2, "curr_addr_b_1_fu_792_p2");
    sc_trace(mVcdFile, curr_addr_b_1_reg_1154, "curr_addr_b_1_reg_1154");
    sc_trace(mVcdFile, curr_addr_c_1_fu_798_p2, "curr_addr_c_1_fu_798_p2");
    sc_trace(mVcdFile, curr_addr_c_1_reg_1159, "curr_addr_c_1_reg_1159");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter2, "ap_enable_reg_pp2_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter3, "ap_enable_reg_pp2_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter4, "ap_enable_reg_pp2_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter5, "ap_enable_reg_pp2_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter6, "ap_enable_reg_pp2_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter7, "ap_enable_reg_pp2_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter8, "ap_enable_reg_pp2_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter9, "ap_enable_reg_pp2_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter10, "ap_enable_reg_pp2_iter10");
    sc_trace(mVcdFile, buff_a_address0, "buff_a_address0");
    sc_trace(mVcdFile, buff_a_ce0, "buff_a_ce0");
    sc_trace(mVcdFile, buff_a_we0, "buff_a_we0");
    sc_trace(mVcdFile, buff_a_q0, "buff_a_q0");
    sc_trace(mVcdFile, buff_b_address0, "buff_b_address0");
    sc_trace(mVcdFile, buff_b_ce0, "buff_b_ce0");
    sc_trace(mVcdFile, buff_b_we0, "buff_b_we0");
    sc_trace(mVcdFile, buff_b_q0, "buff_b_q0");
    sc_trace(mVcdFile, buff_V_address0, "buff_V_address0");
    sc_trace(mVcdFile, buff_V_ce0, "buff_V_ce0");
    sc_trace(mVcdFile, buff_V_we0, "buff_V_we0");
    sc_trace(mVcdFile, buff_V_d0, "buff_V_d0");
    sc_trace(mVcdFile, s_reg_238, "s_reg_238");
    sc_trace(mVcdFile, curr_addr_a_reg_249, "curr_addr_a_reg_249");
    sc_trace(mVcdFile, curr_addr_b_reg_259, "curr_addr_b_reg_259");
    sc_trace(mVcdFile, curr_addr_c_reg_269, "curr_addr_c_reg_269");
    sc_trace(mVcdFile, indvar_phi_fu_283_p4, "indvar_phi_fu_283_p4");
    sc_trace(mVcdFile, indvar1_phi_fu_295_p4, "indvar1_phi_fu_295_p4");
    sc_trace(mVcdFile, tmp_1_fu_453_p1, "tmp_1_fu_453_p1");
    sc_trace(mVcdFile, tmp_4_fu_480_p1, "tmp_4_fu_480_p1");
    sc_trace(mVcdFile, tmp_12_fu_781_p1, "tmp_12_fu_781_p1");
    sc_trace(mVcdFile, tmp_s_fu_427_p1, "tmp_s_fu_427_p1");
    sc_trace(mVcdFile, tmp_5_fu_458_p1, "tmp_5_fu_458_p1");
    sc_trace(mVcdFile, tmp_7_fu_759_p1, "tmp_7_fu_759_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_a_V_ARREADY, "ap_reg_ioackin_a_V_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_a_V_AWREADY, "ap_reg_ioackin_a_V_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_a_V_WREADY, "ap_reg_ioackin_a_V_WREADY");
    sc_trace(mVcdFile, grp_fu_325_p0, "grp_fu_325_p0");
    sc_trace(mVcdFile, grp_fu_325_p1, "grp_fu_325_p1");
    sc_trace(mVcdFile, grp_fu_329_p0, "grp_fu_329_p0");
    sc_trace(mVcdFile, grp_fu_329_p1, "grp_fu_329_p1");
    sc_trace(mVcdFile, grp_fu_333_p0, "grp_fu_333_p0");
    sc_trace(mVcdFile, grp_fu_333_p1, "grp_fu_333_p1");
    sc_trace(mVcdFile, grp_fu_337_p0, "grp_fu_337_p0");
    sc_trace(mVcdFile, grp_fu_337_p1, "grp_fu_337_p1");
    sc_trace(mVcdFile, grp_fu_341_p0, "grp_fu_341_p0");
    sc_trace(mVcdFile, grp_fu_341_p1, "grp_fu_341_p1");
    sc_trace(mVcdFile, grp_fu_345_p0, "grp_fu_345_p0");
    sc_trace(mVcdFile, grp_fu_345_p1, "grp_fu_345_p1");
    sc_trace(mVcdFile, grp_fu_349_p0, "grp_fu_349_p0");
    sc_trace(mVcdFile, grp_fu_349_p1, "grp_fu_349_p1");
    sc_trace(mVcdFile, grp_fu_353_p0, "grp_fu_353_p0");
    sc_trace(mVcdFile, grp_fu_353_p1, "grp_fu_353_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_389_p1, "tmp_2_cast_fu_389_p1");
    sc_trace(mVcdFile, tmp_cast_fu_383_p1, "tmp_cast_fu_383_p1");
    sc_trace(mVcdFile, tmp_9_fu_415_p2, "tmp_9_fu_415_p2");
    sc_trace(mVcdFile, p_Repl2_7_fu_735_p1, "p_Repl2_7_fu_735_p1");
    sc_trace(mVcdFile, p_Repl2_6_fu_732_p1, "p_Repl2_6_fu_732_p1");
    sc_trace(mVcdFile, p_Repl2_5_fu_729_p1, "p_Repl2_5_fu_729_p1");
    sc_trace(mVcdFile, p_Repl2_4_fu_726_p1, "p_Repl2_4_fu_726_p1");
    sc_trace(mVcdFile, p_Repl2_3_fu_723_p1, "p_Repl2_3_fu_723_p1");
    sc_trace(mVcdFile, p_Repl2_2_fu_720_p1, "p_Repl2_2_fu_720_p1");
    sc_trace(mVcdFile, p_Repl2_1_fu_717_p1, "p_Repl2_1_fu_717_p1");
    sc_trace(mVcdFile, p_Repl2_s_fu_714_p1, "p_Repl2_s_fu_714_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_643, "ap_condition_643");
#endif

    }
    mHdltvinHandle.open("example.hdltvin.dat");
    mHdltvoutHandle.open("example.hdltvout.dat");
}

example::~example() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete example_a_V_m_axi_U;
    delete buff_a_U;
    delete buff_b_U;
    delete buff_V_U;
    delete example_fadd_32nsbkb_U1;
    delete example_fadd_32nsbkb_U2;
    delete example_fadd_32nsbkb_U3;
    delete example_fadd_32nsbkb_U4;
    delete example_fadd_32nsbkb_U5;
    delete example_fadd_32nsbkb_U6;
    delete example_fadd_32nsbkb_U7;
    delete example_fadd_32nsbkb_U8;
}

void example::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void example::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void example::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void example::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void example::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void example::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void example::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv32_FFFFFFFF;
}

void example::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_addr_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
            a_addr_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, a_addr_ap_vld.read()))) {
            a_addr_ap_vld_preg = a_addr_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_addr_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
             esl_seteq<1,1,1>(ap_const_logic_1, a_addr_ap_vld.read()))) {
            a_addr_preg = a_addr.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_442_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_442_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_442_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_469_p2.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_469_p2.read()))) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_469_p2.read())))) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0))) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read()))) {
            ap_enable_reg_pp2_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read())))) {
            ap_enable_reg_pp2_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter10 = ap_enable_reg_pp2_iter9.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read()))) {
            ap_enable_reg_pp2_iter10 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter2 = ap_enable_reg_pp2_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter3 = ap_enable_reg_pp2_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter4 = ap_enable_reg_pp2_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter5 = ap_enable_reg_pp2_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter6 = ap_enable_reg_pp2_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter7 = ap_enable_reg_pp2_iter6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter8 = ap_enable_reg_pp2_iter7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp2_iter9 = ap_enable_reg_pp2_iter8.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_770_p2.read()))) {
            ap_enable_reg_pp3_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_AWREADY.read()))) {
            ap_enable_reg_pp3_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_770_p2.read()))) {
            ap_enable_reg_pp3_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read()) && 
                     !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_770_p2.read())))) {
            ap_enable_reg_pp3_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read()))) {
            ap_enable_reg_pp3_iter2 = ap_enable_reg_pp3_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_AWREADY.read()))) {
            ap_enable_reg_pp3_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_V_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_ARREADY.read())) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_ARREADY.read())))) {
            ap_reg_ioackin_a_V_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, a_V_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, a_V_ARREADY.read())))) {
            ap_reg_ioackin_a_V_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_V_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_AWREADY.read())) {
                ap_reg_ioackin_a_V_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, a_V_AWREADY.read())) {
                ap_reg_ioackin_a_V_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_V_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()))) {
            if (esl_seteq<1,1,1>(ap_condition_643.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_a_V_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, a_V_WREADY.read())) {
                ap_reg_ioackin_a_V_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_addr_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
            b_addr_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, b_addr_ap_vld.read()))) {
            b_addr_ap_vld_preg = b_addr_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_addr_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_addr_ap_vld.read()))) {
            b_addr_preg = b_addr.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_addr_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
            c_addr_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, c_addr_ap_vld.read()))) {
            c_addr_ap_vld_preg = c_addr_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_addr_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
             esl_seteq<1,1,1>(ap_const_logic_1, c_addr_ap_vld.read()))) {
            c_addr_preg = c_addr.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state44.read()) && 
         !esl_seteq<1,1,1>(a_V_BVALID.read(), ap_const_logic_0))) {
        curr_addr_a_reg_249 = curr_addr_a_1_reg_1149.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        curr_addr_a_reg_249 = a_addr_in_sig.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state44.read()) && 
         !esl_seteq<1,1,1>(a_V_BVALID.read(), ap_const_logic_0))) {
        curr_addr_b_reg_259 = curr_addr_b_1_reg_1154.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        curr_addr_b_reg_259 = b_addr_in_sig.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state44.read()) && 
         !esl_seteq<1,1,1>(a_V_BVALID.read(), ap_const_logic_0))) {
        curr_addr_c_reg_269 = curr_addr_c_1_reg_1159.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        curr_addr_c_reg_269 = c_addr_in_sig.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read()))) {
        i_reg_303 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read()))) {
        i_reg_303 = i_1_fu_490_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)))) {
        indvar1_reg_291 = indvar_next1_reg_896.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        indvar1_reg_291 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_770_p2.read()))) {
        indvar2_reg_314 = indvar_next2_fu_775_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read()) && 
                !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_AWREADY.read()))) {
        indvar2_reg_314 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)))) {
        indvar_reg_279 = indvar_next_reg_881.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        indvar_reg_279 = ap_const_lv9_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        n_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
            n_V_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, n_V_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)))) {
            n_V_ap_vld_preg = n_V_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        n_V_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, n_V_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)))) {
            n_V_preg = n_V.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state44.read()) && 
         !esl_seteq<1,1,1>(a_V_BVALID.read(), ap_const_logic_0))) {
        s_reg_238 = s_1_reg_852.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        s_reg_238 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)))) {
        ap_pipeline_reg_pp0_iter1_exitcond3_reg_877 = exitcond3_reg_877.read();
        ap_pipeline_reg_pp0_iter1_indvar_reg_279 = indvar_reg_279.read();
        exitcond3_reg_877 = exitcond3_fu_442_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)))) {
        ap_pipeline_reg_pp1_iter1_exitcond_reg_892 = exitcond_reg_892.read();
        ap_pipeline_reg_pp1_iter1_indvar1_reg_291 = indvar1_reg_291.read();
        exitcond_reg_892 = exitcond_fu_469_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()))) {
        ap_pipeline_reg_pp2_iter1_exitcond2_reg_901 = exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter1_tmp_6_reg_910 = tmp_6_reg_910.read();
        exitcond2_reg_901 = exitcond2_fu_485_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_pipeline_reg_pp2_iter2_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter1_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter2_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter1_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter3_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter2_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter3_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter2_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter4_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter3_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter4_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter3_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter5_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter4_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter5_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter4_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter6_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter5_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter6_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter5_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter7_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter6_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter7_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter6_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter8_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter7_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter8_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter7_tmp_6_reg_910.read();
        ap_pipeline_reg_pp2_iter9_exitcond2_reg_901 = ap_pipeline_reg_pp2_iter8_exitcond2_reg_901.read();
        ap_pipeline_reg_pp2_iter9_tmp_6_reg_910 = ap_pipeline_reg_pp2_iter8_tmp_6_reg_910.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())))) {
        ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130 = exitcond4_reg_1130.read();
        exitcond4_reg_1130 = exitcond4_fu_770_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1130.read()))) {
        buff_V_load_reg_1144 = buff_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read()))) {
        curr_addr_a_1_reg_1149 = curr_addr_a_1_fu_786_p2.read();
        curr_addr_b_1_reg_1154 = curr_addr_b_1_fu_792_p2.read();
        curr_addr_c_1_reg_1159 = curr_addr_c_1_fu_798_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_condition_320.read(), ap_const_boolean_1))) {
        i_op_assign_reg_829 = i_op_assign_fu_377_p2.read();
        r_V_reg_824 = r_V_fu_373_p1.read();
        tmp_reg_819 = n_V_in_sig.read().range(15, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        indvar_next1_reg_896 = indvar_next1_fu_474_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        indvar_next_reg_881 = indvar_next_fu_447_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_901.read()))) {
        p_Result_1_1_reg_940 = buff_b_q0.read().range(63, 32);
        p_Result_1_2_reg_950 = buff_b_q0.read().range(95, 64);
        p_Result_1_3_reg_960 = buff_b_q0.read().range(127, 96);
        p_Result_1_4_reg_970 = buff_b_q0.read().range(159, 128);
        p_Result_1_5_reg_980 = buff_b_q0.read().range(191, 160);
        p_Result_1_6_reg_990 = buff_b_q0.read().range(223, 192);
        p_Result_1_7_reg_1000 = buff_b_q0.read().range(255, 224);
        p_Result_2_reg_945 = buff_a_q0.read().range(95, 64);
        p_Result_3_reg_955 = buff_a_q0.read().range(127, 96);
        p_Result_4_reg_965 = buff_a_q0.read().range(159, 128);
        p_Result_5_reg_975 = buff_a_q0.read().range(191, 160);
        p_Result_6_reg_985 = buff_a_q0.read().range(223, 192);
        p_Result_7_reg_995 = buff_a_q0.read().range(255, 224);
        p_Result_s_reg_935 = buff_a_q0.read().range(63, 32);
        tmp_14_reg_930 = tmp_14_fu_506_p1.read();
        tmp_3_reg_925 = tmp_3_fu_502_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        r_V_1_reg_844 = r_V_1_fu_398_p2.read();
        r_V_cast_reg_834 = r_V_cast_fu_386_p1.read();
        segment_V_reg_839 = segment_V_fu_392_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && 
  !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0))) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0))))) {
        reg_357 = a_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        s_1_reg_852 = s_1_fu_409_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
        segment_len_V_reg_857 = segment_len_V_fu_420_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp2_iter8_exitcond2_reg_901.read())) {
        tmp_11_reg_1085 = grp_fu_325_p2.read();
        tmp_14_1_reg_1090 = grp_fu_329_p2.read();
        tmp_14_2_reg_1095 = grp_fu_333_p2.read();
        tmp_14_3_reg_1100 = grp_fu_337_p2.read();
        tmp_14_4_reg_1105 = grp_fu_341_p2.read();
        tmp_14_5_reg_1110 = grp_fu_345_p2.read();
        tmp_14_6_reg_1115 = grp_fu_349_p2.read();
        tmp_14_7_reg_1120 = grp_fu_353_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_ARREADY.read()))) {
        tmp_3_add_i32_shr_reg_872 = tmp_3_add_i32_shr_fu_438_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read()))) {
        tmp_6_reg_910 = tmp_6_fu_496_p1.read();
    }
}

void example::thread_a_V_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) {
            a_V_ARADDR = tmp_5_fu_458_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) {
            a_V_ARADDR = tmp_s_fu_427_p1.read();
        } else {
            a_V_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        a_V_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void example::thread_a_V_ARLEN() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) {
            a_V_ARLEN = tmp_3_add_i32_shr_reg_872.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) {
            a_V_ARLEN = tmp_3_add_i32_shr_fu_438_p1.read();
        } else {
            a_V_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        a_V_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void example::thread_a_V_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_ARREADY.read())))) {
        a_V_ARVALID = ap_const_logic_1;
    } else {
        a_V_ARVALID = ap_const_logic_0;
    }
}

void example::thread_a_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_AWREADY.read()))) {
        a_V_AWVALID = ap_const_logic_1;
    } else {
        a_V_AWVALID = ap_const_logic_0;
    }
}

void example::thread_a_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state44.read()) && 
         !esl_seteq<1,1,1>(a_V_BVALID.read(), ap_const_logic_0))) {
        a_V_BREADY = ap_const_logic_1;
    } else {
        a_V_BREADY = ap_const_logic_0;
    }
}

void example::thread_a_V_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0))))) {
        a_V_RREADY = ap_const_logic_1;
    } else {
        a_V_RREADY = ap_const_logic_0;
    }
}

void example::thread_a_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_WREADY.read()))) {
        a_V_WVALID = ap_const_logic_1;
    } else {
        a_V_WVALID = ap_const_logic_0;
    }
}

void example::thread_a_V_blk_n_AR() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())))) {
        a_V_blk_n_AR = m_axi_a_V_ARREADY.read();
    } else {
        a_V_blk_n_AR = ap_const_logic_1;
    }
}

void example::thread_a_V_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read()))) {
        a_V_blk_n_AW = m_axi_a_V_AWREADY.read();
    } else {
        a_V_blk_n_AW = ap_const_logic_1;
    }
}

void example::thread_a_V_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state44.read()))) {
        a_V_blk_n_B = m_axi_a_V_BVALID.read();
    } else {
        a_V_blk_n_B = ap_const_logic_1;
    }
}

void example::thread_a_V_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read())))) {
        a_V_blk_n_R = m_axi_a_V_RVALID.read();
    } else {
        a_V_blk_n_R = ap_const_logic_1;
    }
}

void example::thread_a_V_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()))) {
        a_V_blk_n_W = m_axi_a_V_WREADY.read();
    } else {
        a_V_blk_n_W = ap_const_logic_1;
    }
}

void example::thread_a_addr_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_addr_ap_vld.read())) {
        a_addr_ap_vld_in_sig = a_addr_ap_vld.read();
    } else {
        a_addr_ap_vld_in_sig = a_addr_ap_vld_preg.read();
    }
}

void example::thread_a_addr_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        a_addr_blk_n = a_addr_ap_vld.read();
    } else {
        a_addr_blk_n = ap_const_logic_1;
    }
}

void example::thread_a_addr_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_addr_ap_vld.read())) {
        a_addr_in_sig = a_addr.read();
    } else {
        a_addr_in_sig = a_addr_preg.read();
    }
}

void example::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(10, 10);
}

void example::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read().range(18, 18);
}

void example::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read().range(20, 20);
}

void example::thread_ap_CS_fsm_pp3_stage0() {
    ap_CS_fsm_pp3_stage0 = ap_CS_fsm.read().range(22, 22);
}

void example::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void example::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void example::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(11, 11);
}

void example::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void example::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(17, 17);
}

void example::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read().range(19, 19);
}

void example::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void example::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read().range(21, 21);
}

void example::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void example::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read().range(23, 23);
}

void example::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read().range(27, 27);
}

void example::thread_ap_condition_320() {
    ap_condition_320 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(c_addr_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(b_addr_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(a_addr_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(n_V_ap_vld_in_sig.read(), ap_const_logic_0));
}

void example::thread_ap_condition_643() {
    ap_condition_643 = !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read()));
}

void example::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void example::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void example::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void example::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void example::thread_ap_sig_ioackin_a_V_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_ARREADY.read())) {
        ap_sig_ioackin_a_V_ARREADY = a_V_ARREADY.read();
    } else {
        ap_sig_ioackin_a_V_ARREADY = ap_const_logic_1;
    }
}

void example::thread_ap_sig_ioackin_a_V_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_AWREADY.read())) {
        ap_sig_ioackin_a_V_AWREADY = a_V_AWREADY.read();
    } else {
        ap_sig_ioackin_a_V_AWREADY = ap_const_logic_1;
    }
}

void example::thread_ap_sig_ioackin_a_V_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_V_WREADY.read())) {
        ap_sig_ioackin_a_V_WREADY = a_V_WREADY.read();
    } else {
        ap_sig_ioackin_a_V_WREADY = ap_const_logic_1;
    }
}

void example::thread_b_addr_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_addr_ap_vld.read())) {
        b_addr_ap_vld_in_sig = b_addr_ap_vld.read();
    } else {
        b_addr_ap_vld_in_sig = b_addr_ap_vld_preg.read();
    }
}

void example::thread_b_addr_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        b_addr_blk_n = b_addr_ap_vld.read();
    } else {
        b_addr_blk_n = ap_const_logic_1;
    }
}

void example::thread_b_addr_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_addr_ap_vld.read())) {
        b_addr_in_sig = b_addr.read();
    } else {
        b_addr_in_sig = b_addr_preg.read();
    }
}

void example::thread_buff_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()))) {
        buff_V_address0 =  (sc_lv<8>) (tmp_12_fu_781_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter10.read())) {
        buff_V_address0 =  (sc_lv<8>) (ap_pipeline_reg_pp2_iter9_tmp_6_reg_910.read());
    } else {
        buff_V_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void example::thread_buff_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp3_stage0.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter10.read()))) {
        buff_V_ce0 = ap_const_logic_1;
    } else {
        buff_V_ce0 = ap_const_logic_0;
    }
}

void example::thread_buff_V_d0() {
    buff_V_d0 = esl_concat<224,32>(esl_concat<192,32>(esl_concat<160,32>(esl_concat<128,32>(esl_concat<96,32>(esl_concat<64,32>(esl_concat<32,32>(p_Repl2_7_fu_735_p1.read(), p_Repl2_6_fu_732_p1.read()), p_Repl2_5_fu_729_p1.read()), p_Repl2_4_fu_726_p1.read()), p_Repl2_3_fu_723_p1.read()), p_Repl2_2_fu_720_p1.read()), p_Repl2_1_fu_717_p1.read()), p_Repl2_s_fu_714_p1.read());
}

void example::thread_buff_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp2_iter9_exitcond2_reg_901.read())))) {
        buff_V_we0 = ap_const_logic_1;
    } else {
        buff_V_we0 = ap_const_logic_0;
    }
}

void example::thread_buff_a_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        buff_a_address0 =  (sc_lv<8>) (tmp_6_fu_496_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) {
        buff_a_address0 =  (sc_lv<8>) (tmp_1_fu_453_p1.read());
    } else {
        buff_a_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void example::thread_buff_a_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        buff_a_ce0 = ap_const_logic_1;
    } else {
        buff_a_ce0 = ap_const_logic_0;
    }
}

void example::thread_buff_a_we0() {
    if (((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond3_reg_877.read())))) {
        buff_a_we0 = ap_const_logic_1;
    } else {
        buff_a_we0 = ap_const_logic_0;
    }
}

void example::thread_buff_b_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        buff_b_address0 =  (sc_lv<8>) (tmp_6_fu_496_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read())) {
        buff_b_address0 =  (sc_lv<8>) (tmp_4_fu_480_p1.read());
    } else {
        buff_b_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void example::thread_buff_b_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read())))) {
        buff_b_ce0 = ap_const_logic_1;
    } else {
        buff_b_ce0 = ap_const_logic_0;
    }
}

void example::thread_buff_b_we0() {
    if (((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp1_iter1_exitcond_reg_892.read())))) {
        buff_b_we0 = ap_const_logic_1;
    } else {
        buff_b_we0 = ap_const_logic_0;
    }
}

void example::thread_c_addr_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_addr_ap_vld.read())) {
        c_addr_ap_vld_in_sig = c_addr_ap_vld.read();
    } else {
        c_addr_ap_vld_in_sig = c_addr_ap_vld_preg.read();
    }
}

void example::thread_c_addr_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        c_addr_blk_n = c_addr_ap_vld.read();
    } else {
        c_addr_blk_n = ap_const_logic_1;
    }
}

void example::thread_c_addr_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_addr_ap_vld.read())) {
        c_addr_in_sig = c_addr.read();
    } else {
        c_addr_in_sig = c_addr_preg.read();
    }
}

void example::thread_curr_addr_a_1_fu_786_p2() {
    curr_addr_a_1_fu_786_p2 = (!curr_addr_a_reg_249.read().is_01() || !ap_const_lv32_100.is_01())? sc_lv<32>(): (sc_biguint<32>(curr_addr_a_reg_249.read()) + sc_biguint<32>(ap_const_lv32_100));
}

void example::thread_curr_addr_b_1_fu_792_p2() {
    curr_addr_b_1_fu_792_p2 = (!curr_addr_b_reg_259.read().is_01() || !ap_const_lv32_100.is_01())? sc_lv<32>(): (sc_biguint<32>(curr_addr_b_reg_259.read()) + sc_biguint<32>(ap_const_lv32_100));
}

void example::thread_curr_addr_c_1_fu_798_p2() {
    curr_addr_c_1_fu_798_p2 = (!curr_addr_c_reg_269.read().is_01() || !ap_const_lv32_100.is_01())? sc_lv<32>(): (sc_biguint<32>(curr_addr_c_reg_269.read()) + sc_biguint<32>(ap_const_lv32_100));
}

void example::thread_exitcond1_fu_404_p2() {
    exitcond1_fu_404_p2 = (!s_reg_238.read().is_01() || !segment_V_reg_839.read().is_01())? sc_lv<1>(): sc_lv<1>(s_reg_238.read() == segment_V_reg_839.read());
}

void example::thread_exitcond2_fu_485_p2() {
    exitcond2_fu_485_p2 = (!i_reg_303.read().is_01() || !segment_len_V_reg_857.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_303.read() == segment_len_V_reg_857.read());
}

void example::thread_exitcond3_fu_442_p2() {
    exitcond3_fu_442_p2 = (!indvar_phi_fu_283_p4.read().is_01() || !segment_len_V_reg_857.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_phi_fu_283_p4.read() == segment_len_V_reg_857.read());
}

void example::thread_exitcond4_fu_770_p2() {
    exitcond4_fu_770_p2 = (!indvar2_reg_314.read().is_01() || !segment_len_V_reg_857.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar2_reg_314.read() == segment_len_V_reg_857.read());
}

void example::thread_exitcond_fu_469_p2() {
    exitcond_fu_469_p2 = (!indvar1_phi_fu_295_p4.read().is_01() || !segment_len_V_reg_857.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar1_phi_fu_295_p4.read() == segment_len_V_reg_857.read());
}

void example::thread_grp_fu_325_p0() {
    grp_fu_325_p0 = tmp_3_reg_925.read();
}

void example::thread_grp_fu_325_p1() {
    grp_fu_325_p1 = tmp_14_reg_930.read();
}

void example::thread_grp_fu_329_p0() {
    grp_fu_329_p0 = p_Result_s_reg_935.read();
}

void example::thread_grp_fu_329_p1() {
    grp_fu_329_p1 = p_Result_1_1_reg_940.read();
}

void example::thread_grp_fu_333_p0() {
    grp_fu_333_p0 = p_Result_2_reg_945.read();
}

void example::thread_grp_fu_333_p1() {
    grp_fu_333_p1 = p_Result_1_2_reg_950.read();
}

void example::thread_grp_fu_337_p0() {
    grp_fu_337_p0 = p_Result_3_reg_955.read();
}

void example::thread_grp_fu_337_p1() {
    grp_fu_337_p1 = p_Result_1_3_reg_960.read();
}

void example::thread_grp_fu_341_p0() {
    grp_fu_341_p0 = p_Result_4_reg_965.read();
}

void example::thread_grp_fu_341_p1() {
    grp_fu_341_p1 = p_Result_1_4_reg_970.read();
}

void example::thread_grp_fu_345_p0() {
    grp_fu_345_p0 = p_Result_5_reg_975.read();
}

void example::thread_grp_fu_345_p1() {
    grp_fu_345_p1 = p_Result_1_5_reg_980.read();
}

void example::thread_grp_fu_349_p0() {
    grp_fu_349_p0 = p_Result_6_reg_985.read();
}

void example::thread_grp_fu_349_p1() {
    grp_fu_349_p1 = p_Result_1_6_reg_990.read();
}

void example::thread_grp_fu_353_p0() {
    grp_fu_353_p0 = p_Result_7_reg_995.read();
}

void example::thread_grp_fu_353_p1() {
    grp_fu_353_p1 = p_Result_1_7_reg_1000.read();
}

void example::thread_i_1_fu_490_p2() {
    i_1_fu_490_p2 = (!i_reg_303.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_reg_303.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void example::thread_i_op_assign_fu_377_p2() {
    i_op_assign_fu_377_p2 = (!r_V_fu_373_p1.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(r_V_fu_373_p1.read() != ap_const_lv8_0);
}

void example::thread_indvar1_phi_fu_295_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()))) {
        indvar1_phi_fu_295_p4 = indvar_next1_reg_896.read();
    } else {
        indvar1_phi_fu_295_p4 = indvar1_reg_291.read();
    }
}

void example::thread_indvar_next1_fu_474_p2() {
    indvar_next1_fu_474_p2 = (!indvar1_phi_fu_295_p4.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(indvar1_phi_fu_295_p4.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void example::thread_indvar_next2_fu_775_p2() {
    indvar_next2_fu_775_p2 = (!indvar2_reg_314.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(indvar2_reg_314.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void example::thread_indvar_next_fu_447_p2() {
    indvar_next_fu_447_p2 = (!indvar_phi_fu_283_p4.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(indvar_phi_fu_283_p4.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void example::thread_indvar_phi_fu_283_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0))) {
        indvar_phi_fu_283_p4 = indvar_next_reg_881.read();
    } else {
        indvar_phi_fu_283_p4 = indvar_reg_279.read();
    }
}

void example::thread_n_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, n_V_ap_vld.read())) {
        n_V_ap_vld_in_sig = n_V_ap_vld.read();
    } else {
        n_V_ap_vld_in_sig = n_V_ap_vld_preg.read();
    }
}

void example::thread_n_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        n_V_blk_n = n_V_ap_vld.read();
    } else {
        n_V_blk_n = ap_const_logic_1;
    }
}

void example::thread_n_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, n_V_ap_vld.read())) {
        n_V_in_sig = n_V.read();
    } else {
        n_V_in_sig = n_V_preg.read();
    }
}

void example::thread_p_Repl2_1_fu_717_p1() {
    p_Repl2_1_fu_717_p1 = tmp_14_1_reg_1090.read();
}

void example::thread_p_Repl2_2_fu_720_p1() {
    p_Repl2_2_fu_720_p1 = tmp_14_2_reg_1095.read();
}

void example::thread_p_Repl2_3_fu_723_p1() {
    p_Repl2_3_fu_723_p1 = tmp_14_3_reg_1100.read();
}

void example::thread_p_Repl2_4_fu_726_p1() {
    p_Repl2_4_fu_726_p1 = tmp_14_4_reg_1105.read();
}

void example::thread_p_Repl2_5_fu_729_p1() {
    p_Repl2_5_fu_729_p1 = tmp_14_5_reg_1110.read();
}

void example::thread_p_Repl2_6_fu_732_p1() {
    p_Repl2_6_fu_732_p1 = tmp_14_6_reg_1115.read();
}

void example::thread_p_Repl2_7_fu_735_p1() {
    p_Repl2_7_fu_735_p1 = tmp_14_7_reg_1120.read();
}

void example::thread_p_Repl2_s_fu_714_p1() {
    p_Repl2_s_fu_714_p1 = tmp_11_reg_1085.read();
}

void example::thread_r_V_1_fu_398_p2() {
    r_V_1_fu_398_p2 = (!ap_const_lv9_1FF.is_01() || !segment_V_fu_392_p2.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_1FF) + sc_biguint<9>(segment_V_fu_392_p2.read()));
}

void example::thread_r_V_cast_fu_386_p1() {
    r_V_cast_fu_386_p1 = esl_zext<9,8>(r_V_reg_824.read());
}

void example::thread_r_V_fu_373_p1() {
    r_V_fu_373_p1 = n_V_in_sig.read().range(8-1, 0);
}

void example::thread_s_1_fu_409_p2() {
    s_1_fu_409_p2 = (!s_reg_238.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(s_reg_238.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void example::thread_segment_V_fu_392_p2() {
    segment_V_fu_392_p2 = (!tmp_2_cast_fu_389_p1.read().is_01() || !tmp_cast_fu_383_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_2_cast_fu_389_p1.read()) + sc_biguint<9>(tmp_cast_fu_383_p1.read()));
}

void example::thread_segment_len_V_fu_420_p3() {
    segment_len_V_fu_420_p3 = (!tmp_9_fu_415_p2.read()[0].is_01())? sc_lv<9>(): ((tmp_9_fu_415_p2.read()[0].to_bool())? r_V_cast_reg_834.read(): ap_const_lv9_100);
}

void example::thread_tmp_12_fu_781_p1() {
    tmp_12_fu_781_p1 = esl_zext<64,9>(indvar2_reg_314.read());
}

void example::thread_tmp_14_fu_506_p1() {
    tmp_14_fu_506_p1 = buff_b_q0.read().range(32-1, 0);
}

void example::thread_tmp_1_fu_453_p1() {
    tmp_1_fu_453_p1 = esl_zext<64,9>(ap_pipeline_reg_pp0_iter1_indvar_reg_279.read());
}

void example::thread_tmp_2_cast_fu_389_p1() {
    tmp_2_cast_fu_389_p1 = esl_zext<9,1>(i_op_assign_reg_829.read());
}

void example::thread_tmp_3_add_i32_shr_fu_438_p1() {
    tmp_3_add_i32_shr_fu_438_p1 = esl_zext<32,9>(segment_len_V_reg_857.read());
}

void example::thread_tmp_3_fu_502_p1() {
    tmp_3_fu_502_p1 = buff_a_q0.read().range(32-1, 0);
}

void example::thread_tmp_4_fu_480_p1() {
    tmp_4_fu_480_p1 = esl_zext<64,9>(ap_pipeline_reg_pp1_iter1_indvar1_reg_291.read());
}

void example::thread_tmp_5_fu_458_p1() {
    tmp_5_fu_458_p1 = esl_sext<64,32>(curr_addr_b_reg_259.read());
}

void example::thread_tmp_6_fu_496_p1() {
    tmp_6_fu_496_p1 = esl_zext<64,9>(i_reg_303.read());
}

void example::thread_tmp_7_fu_759_p1() {
    tmp_7_fu_759_p1 = esl_sext<64,32>(curr_addr_c_reg_269.read());
}

void example::thread_tmp_9_fu_415_p2() {
    tmp_9_fu_415_p2 = (!s_reg_238.read().is_01() || !r_V_1_reg_844.read().is_01())? sc_lv<1>(): sc_lv<1>(s_reg_238.read() == r_V_1_reg_844.read());
}

void example::thread_tmp_cast_fu_383_p1() {
    tmp_cast_fu_383_p1 = esl_zext<9,8>(tmp_reg_819.read());
}

void example::thread_tmp_s_fu_427_p1() {
    tmp_s_fu_427_p1 = esl_sext<64,32>(curr_addr_a_reg_249.read());
}

void example::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_condition_320.read(), ap_const_boolean_1)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_404_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_ARREADY.read())) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 1024 : 
            if ((!(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) && !(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_442_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond3_reg_877.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_442_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2048 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_ARREADY.read())) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 262144 : 
            if ((!(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) && !(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_469_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_892.read()) && esl_seteq<1,1,1>(a_V_RVALID.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_469_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            break;
        case 1048576 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter10.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter9.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_485_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 2097152 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_AWREADY.read())) {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 4194304 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read())) && !(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_770_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1130.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_V_WREADY.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_770_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state40;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 134217728 : 
            if (!esl_seteq<1,1,1>(a_V_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state44;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<28>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void example::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWVALID\" :  \"" << m_axi_a_V_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_AWREADY\" :  \"" << m_axi_a_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWADDR\" :  \"" << m_axi_a_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWID\" :  \"" << m_axi_a_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWLEN\" :  \"" << m_axi_a_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWSIZE\" :  \"" << m_axi_a_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWBURST\" :  \"" << m_axi_a_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWLOCK\" :  \"" << m_axi_a_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWCACHE\" :  \"" << m_axi_a_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWPROT\" :  \"" << m_axi_a_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWQOS\" :  \"" << m_axi_a_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWREGION\" :  \"" << m_axi_a_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_AWUSER\" :  \"" << m_axi_a_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_WVALID\" :  \"" << m_axi_a_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_WREADY\" :  \"" << m_axi_a_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_WDATA\" :  \"" << m_axi_a_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_WSTRB\" :  \"" << m_axi_a_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_WLAST\" :  \"" << m_axi_a_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_WID\" :  \"" << m_axi_a_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_WUSER\" :  \"" << m_axi_a_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARVALID\" :  \"" << m_axi_a_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_ARREADY\" :  \"" << m_axi_a_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARADDR\" :  \"" << m_axi_a_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARID\" :  \"" << m_axi_a_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARLEN\" :  \"" << m_axi_a_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARSIZE\" :  \"" << m_axi_a_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARBURST\" :  \"" << m_axi_a_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARLOCK\" :  \"" << m_axi_a_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARCACHE\" :  \"" << m_axi_a_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARPROT\" :  \"" << m_axi_a_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARQOS\" :  \"" << m_axi_a_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARREGION\" :  \"" << m_axi_a_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_ARUSER\" :  \"" << m_axi_a_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_RVALID\" :  \"" << m_axi_a_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_RREADY\" :  \"" << m_axi_a_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_RDATA\" :  \"" << m_axi_a_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_RLAST\" :  \"" << m_axi_a_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_RID\" :  \"" << m_axi_a_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_RUSER\" :  \"" << m_axi_a_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_RRESP\" :  \"" << m_axi_a_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_BVALID\" :  \"" << m_axi_a_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_V_BREADY\" :  \"" << m_axi_a_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_BRESP\" :  \"" << m_axi_a_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_BID\" :  \"" << m_axi_a_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_V_BUSER\" :  \"" << m_axi_a_V_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n_V\" :  \"" << n_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n_V_ap_vld\" :  \"" << n_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_addr\" :  \"" << a_addr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_addr_ap_vld\" :  \"" << a_addr_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_addr\" :  \"" << b_addr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_addr_ap_vld\" :  \"" << b_addr_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_addr\" :  \"" << c_addr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_addr_ap_vld\" :  \"" << c_addr_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

